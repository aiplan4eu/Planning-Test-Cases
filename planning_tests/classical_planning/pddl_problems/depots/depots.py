from collections import OrderedDict
import unified_planning as up
from unified_planning.shortcuts import *
from planning_tests.commons.problem import TestCaseProblem


class depots_pfile1(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
        env = up.environment.get_env()
        emgr = env.expression_manager
        tm = env.type_manager
        type_object = tm.UserType("object")
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_place = up.model.Fluent("place", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_locatable = up.model.Fluent("locatable", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_depot = up.model.Fluent("depot", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_distributor = up.model.Fluent("distributor", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_truck = up.model.Fluent("truck", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_hoist = up.model.Fluent("hoist", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_surface = up.model.Fluent("surface", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_pallet = up.model.Fluent("pallet", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_crate = up.model.Fluent("crate", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        object_depot0 = up.model.Object("depot0", type_object)
        object_distributor0 = up.model.Object("distributor0", type_object)
        object_distributor1 = up.model.Object("distributor1", type_object)
        object_truck0 = up.model.Object("truck0", type_object)
        object_truck1 = up.model.Object("truck1", type_object)
        object_pallet0 = up.model.Object("pallet0", type_object)
        object_pallet1 = up.model.Object("pallet1", type_object)
        object_pallet2 = up.model.Object("pallet2", type_object)
        object_crate0 = up.model.Object("crate0", type_object)
        object_crate1 = up.model.Object("crate1", type_object)
        object_hoist0 = up.model.Object("hoist0", type_object)
        object_hoist1 = up.model.Object("hoist1", type_object)
        object_hoist2 = up.model.Object("hoist2", type_object)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob1818", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_place, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_locatable, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_depot, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_distributor, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_truck, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_hoist, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_surface, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_pallet, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_crate, default_initial_value=emgr.FALSE())
        act_drive = up.model.InstantaneousAction("drive", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object)]))
        act_drive.add_precondition(emgr.And(fluent_truck(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_drive)
        act_lift = up.model.InstantaneousAction("lift", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_lift.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_surface(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_lift)
        act_drop = up.model.InstantaneousAction("drop", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_drop.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_surface(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_drop)
        act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_load.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_truck(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_load)
        act_unload = up.model.InstantaneousAction("unload", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_unload.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_truck(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env)))))
        act_unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_unload)
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_truck(emgr.ObjectExp(object_truck0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_truck(emgr.ObjectExp(object_truck1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet2)), fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet1))))

        return problem

    def get_description(self):
        return 'Task Depots P01 from classical IPC transformed with UP'

    def version(self):
        return 1


class depots_pfile2(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
        env = up.environment.get_env()
        emgr = env.expression_manager
        tm = env.type_manager
        type_object = tm.UserType("object")
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_place = up.model.Fluent("place", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_locatable = up.model.Fluent("locatable", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_depot = up.model.Fluent("depot", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_distributor = up.model.Fluent("distributor", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_truck = up.model.Fluent("truck", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_hoist = up.model.Fluent("hoist", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_surface = up.model.Fluent("surface", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_pallet = up.model.Fluent("pallet", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_crate = up.model.Fluent("crate", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        object_depot0 = up.model.Object("depot0", type_object)
        object_distributor0 = up.model.Object("distributor0", type_object)
        object_distributor1 = up.model.Object("distributor1", type_object)
        object_truck0 = up.model.Object("truck0", type_object)
        object_truck1 = up.model.Object("truck1", type_object)
        object_pallet0 = up.model.Object("pallet0", type_object)
        object_pallet1 = up.model.Object("pallet1", type_object)
        object_pallet2 = up.model.Object("pallet2", type_object)
        object_crate0 = up.model.Object("crate0", type_object)
        object_crate1 = up.model.Object("crate1", type_object)
        object_crate2 = up.model.Object("crate2", type_object)
        object_crate3 = up.model.Object("crate3", type_object)
        object_hoist0 = up.model.Object("hoist0", type_object)
        object_hoist1 = up.model.Object("hoist1", type_object)
        object_hoist2 = up.model.Object("hoist2", type_object)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob7512", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_crate2)
        problem.add_object(object_crate3)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_place, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_locatable, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_depot, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_distributor, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_truck, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_hoist, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_surface, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_pallet, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_crate, default_initial_value=emgr.FALSE())
        act_drive = up.model.InstantaneousAction("drive", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object)]))
        act_drive.add_precondition(emgr.And(fluent_truck(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_drive)
        act_lift = up.model.InstantaneousAction("lift", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_lift.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_surface(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_lift)
        act_drop = up.model.InstantaneousAction("drop", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_drop.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_surface(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_drop)
        act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_load.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_truck(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_load)
        act_unload = up.model.InstantaneousAction("unload", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_unload.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_truck(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env)))))
        act_unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_unload)
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_truck(emgr.ObjectExp(object_truck0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_truck(emgr.ObjectExp(object_truck1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet2)), fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_crate3)), fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet0)), fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_pallet1))))

        return problem

    def get_description(self):
        return 'Task Depots P02 from classical IPC transformed with UP'

    def version(self):
        return 1


class depots_pfile3(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
        env = up.environment.get_env()
        emgr = env.expression_manager
        tm = env.type_manager
        type_object = tm.UserType("object")
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_object), ("y", type_object)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_place = up.model.Fluent("place", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_locatable = up.model.Fluent("locatable", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_depot = up.model.Fluent("depot", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_distributor = up.model.Fluent("distributor", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_truck = up.model.Fluent("truck", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_hoist = up.model.Fluent("hoist", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_surface = up.model.Fluent("surface", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_pallet = up.model.Fluent("pallet", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        fluent_crate = up.model.Fluent("crate", tm.BoolType(), _signature=OrderedDict([("x", type_object)]))
        object_depot0 = up.model.Object("depot0", type_object)
        object_distributor0 = up.model.Object("distributor0", type_object)
        object_distributor1 = up.model.Object("distributor1", type_object)
        object_truck0 = up.model.Object("truck0", type_object)
        object_truck1 = up.model.Object("truck1", type_object)
        object_pallet0 = up.model.Object("pallet0", type_object)
        object_pallet1 = up.model.Object("pallet1", type_object)
        object_pallet2 = up.model.Object("pallet2", type_object)
        object_crate0 = up.model.Object("crate0", type_object)
        object_crate1 = up.model.Object("crate1", type_object)
        object_crate2 = up.model.Object("crate2", type_object)
        object_crate3 = up.model.Object("crate3", type_object)
        object_crate4 = up.model.Object("crate4", type_object)
        object_crate5 = up.model.Object("crate5", type_object)
        object_hoist0 = up.model.Object("hoist0", type_object)
        object_hoist1 = up.model.Object("hoist1", type_object)
        object_hoist2 = up.model.Object("hoist2", type_object)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob1935", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_crate2)
        problem.add_object(object_crate3)
        problem.add_object(object_crate4)
        problem.add_object(object_crate5)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_place, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_locatable, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_depot, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_distributor, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_truck, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_hoist, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_surface, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_pallet, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_crate, default_initial_value=emgr.FALSE())
        act_drive = up.model.InstantaneousAction("drive", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object)]))
        act_drive.add_precondition(emgr.And(fluent_truck(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_drive)
        act_lift = up.model.InstantaneousAction("lift", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_lift.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_surface(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_lift)
        act_drop = up.model.InstantaneousAction("drop", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_drop.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_surface(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_drop)
        act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_load.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_truck(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env)))))
        act_load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_load)
        act_unload = up.model.InstantaneousAction("unload", _parameters=OrderedDict([("x", type_object), ("y", type_object), ("z", type_object), ("p", type_object)]))
        act_unload.add_precondition(emgr.And(fluent_hoist(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_crate(emgr.ParameterExp(up.model.Parameter("y", type_object, env))), fluent_truck(emgr.ParameterExp(up.model.Parameter("z", type_object, env))), fluent_place(emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_object, env)), emgr.ParameterExp(up.model.Parameter("p", type_object, env))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env)))))
        act_unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_object, env)), emgr.ParameterExp(up.model.Parameter("y", type_object, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_object, env)), emgr.ParameterExp(up.model.Parameter("z", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_object, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_unload)
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate4)), emgr.TRUE())
        problem.set_initial_value(fluent_pallet(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate5)), emgr.TRUE())
        problem.set_initial_value(fluent_truck(emgr.ObjectExp(object_truck0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_truck(emgr.ObjectExp(object_truck1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_hoist(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate4)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_crate(emgr.ObjectExp(object_crate5)), emgr.TRUE())
        problem.set_initial_value(fluent_surface(emgr.ObjectExp(object_crate5)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_place(emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_crate1)), fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet2)), fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet0)), fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate2)), fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_pallet1)), fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_crate0))))

        return problem

    def get_description(self):
        return 'Task Depots P03 from classical IPC transformed with UP'

    def version(self):
        return 1
