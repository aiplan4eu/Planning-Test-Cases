from collections import OrderedDict
import unified_planning as up
from unified_planning.shortcuts import *
from planning_tests.commons.problem import TestCaseProblem


class tpp_pfile1(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_goods = tm.UserType("goods", type_locatable)
        type_truck = tm.UserType("truck", type_locatable)
        type_level = tm.UserType("level")
        type_place = tm.UserType("place")
        type_market = tm.UserType("market", type_place)
        type_depot = tm.UserType("depot", type_place)
        fluent_loaded = up.model.Fluent("loaded", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("t", type_truck), ("l", type_level)]))
        fluent_ready_to_load = up.model.Fluent("ready-to-load", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("m", type_market), ("l", type_level)]))
        fluent_stored = up.model.Fluent("stored", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("l", type_level)]))
        fluent_on_sale = up.model.Fluent("on-sale", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("m", type_market), ("l", type_level)]))
        fluent_next = up.model.Fluent("next", tm.BoolType(), _signature=OrderedDict([("l1", type_level), ("l2", type_level)]))
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("t", type_truck), ("p", type_place)]))
        fluent_connected = up.model.Fluent("connected", tm.BoolType(), _signature=OrderedDict([("p1", type_place), ("p2", type_place)]))
        object_goods1 = up.model.Object("goods1", type_goods)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_market1 = up.model.Object("market1", type_market)
        object_depot1 = up.model.Object("depot1", type_depot)
        object_level0 = up.model.Object("level0", type_level)
        object_level1 = up.model.Object("level1", type_level)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("TPP", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_goods1)
        problem.add_object(object_truck1)
        problem.add_object(object_market1)
        problem.add_object(object_depot1)
        problem.add_object(object_level0)
        problem.add_object(object_level1)
        problem.add_fluent(fluent_loaded, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_ready_to_load, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_stored, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_sale, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_next, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_connected, default_initial_value=emgr.FALSE())
        act_drive = up.model.InstantaneousAction("drive", _parameters=OrderedDict([("t", type_truck), ("from", type_place), ("to", type_place)]))
        act_drive.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("from", type_place, env))), fluent_connected(emgr.ParameterExp(up.model.Parameter("from", type_place, env)), emgr.ParameterExp(up.model.Parameter("to", type_place, env)))))
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("from", type_place, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("to", type_place, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drive)
        act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("g", type_goods), ("t", type_truck), ("m", type_market), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env))), fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_load.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_load)
        act_unload = up.model.InstantaneousAction("unload", _parameters=OrderedDict([("g", type_goods), ("t", type_truck), ("d", type_depot), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("d", type_depot, env))), fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_unload.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_unload)
        act_buy = up.model.InstantaneousAction("buy", _parameters=OrderedDict([("t", type_truck), ("g", type_goods), ("m", type_market), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_buy.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env))), fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_buy.add_effect(fluent=fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_buy)
        problem.set_initial_value(fluent_next(emgr.ObjectExp(object_level1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_depot1), emgr.ObjectExp(object_market1)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_market1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.add_goal(goal=fluent_stored(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_level1)))
        return problem

    def get_description(self):
        return 'Task TPP P01 from classical IPC transformed with UP'

    def version(self):
        return 1


class tpp_pfile2(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_goods = tm.UserType("goods", type_locatable)
        type_truck = tm.UserType("truck", type_locatable)
        type_level = tm.UserType("level")
        type_place = tm.UserType("place")
        type_market = tm.UserType("market", type_place)
        type_depot = tm.UserType("depot", type_place)
        fluent_loaded = up.model.Fluent("loaded", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("t", type_truck), ("l", type_level)]))
        fluent_ready_to_load = up.model.Fluent("ready-to-load", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("m", type_market), ("l", type_level)]))
        fluent_stored = up.model.Fluent("stored", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("l", type_level)]))
        fluent_on_sale = up.model.Fluent("on-sale", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("m", type_market), ("l", type_level)]))
        fluent_next = up.model.Fluent("next", tm.BoolType(), _signature=OrderedDict([("l1", type_level), ("l2", type_level)]))
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("t", type_truck), ("p", type_place)]))
        fluent_connected = up.model.Fluent("connected", tm.BoolType(), _signature=OrderedDict([("p1", type_place), ("p2", type_place)]))
        object_goods1 = up.model.Object("goods1", type_goods)
        object_goods2 = up.model.Object("goods2", type_goods)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_market1 = up.model.Object("market1", type_market)
        object_depot1 = up.model.Object("depot1", type_depot)
        object_level0 = up.model.Object("level0", type_level)
        object_level1 = up.model.Object("level1", type_level)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("TPP", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_goods1)
        problem.add_object(object_goods2)
        problem.add_object(object_truck1)
        problem.add_object(object_market1)
        problem.add_object(object_depot1)
        problem.add_object(object_level0)
        problem.add_object(object_level1)
        problem.add_fluent(fluent_loaded, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_ready_to_load, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_stored, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_sale, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_next, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_connected, default_initial_value=emgr.FALSE())
        act_drive = up.model.InstantaneousAction("drive", _parameters=OrderedDict([("t", type_truck), ("from", type_place), ("to", type_place)]))
        act_drive.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("from", type_place, env))), fluent_connected(emgr.ParameterExp(up.model.Parameter("from", type_place, env)), emgr.ParameterExp(up.model.Parameter("to", type_place, env)))))
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("from", type_place, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("to", type_place, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drive)
        act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("g", type_goods), ("t", type_truck), ("m", type_market), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env))), fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_load.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_load)
        act_unload = up.model.InstantaneousAction("unload", _parameters=OrderedDict([("g", type_goods), ("t", type_truck), ("d", type_depot), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("d", type_depot, env))), fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_unload.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_unload)
        act_buy = up.model.InstantaneousAction("buy", _parameters=OrderedDict([("t", type_truck), ("g", type_goods), ("m", type_market), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_buy.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env))), fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_buy.add_effect(fluent=fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_buy)
        problem.set_initial_value(fluent_next(emgr.ObjectExp(object_level1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_depot1), emgr.ObjectExp(object_market1)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_market1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_stored(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_level1)), fluent_stored(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_level1))))

        return problem

    def get_description(self):
        return 'Task TPP P02 from classical IPC transformed with UP'

    def version(self):
        return 1


class tpp_pfile3(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_goods = tm.UserType("goods", type_locatable)
        type_truck = tm.UserType("truck", type_locatable)
        type_level = tm.UserType("level")
        type_place = tm.UserType("place")
        type_market = tm.UserType("market", type_place)
        type_depot = tm.UserType("depot", type_place)
        fluent_loaded = up.model.Fluent("loaded", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("t", type_truck), ("l", type_level)]))
        fluent_ready_to_load = up.model.Fluent("ready-to-load", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("m", type_market), ("l", type_level)]))
        fluent_stored = up.model.Fluent("stored", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("l", type_level)]))
        fluent_on_sale = up.model.Fluent("on-sale", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("m", type_market), ("l", type_level)]))
        fluent_next = up.model.Fluent("next", tm.BoolType(), _signature=OrderedDict([("l1", type_level), ("l2", type_level)]))
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("t", type_truck), ("p", type_place)]))
        fluent_connected = up.model.Fluent("connected", tm.BoolType(), _signature=OrderedDict([("p1", type_place), ("p2", type_place)]))
        object_goods1 = up.model.Object("goods1", type_goods)
        object_goods2 = up.model.Object("goods2", type_goods)
        object_goods3 = up.model.Object("goods3", type_goods)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_market1 = up.model.Object("market1", type_market)
        object_depot1 = up.model.Object("depot1", type_depot)
        object_level0 = up.model.Object("level0", type_level)
        object_level1 = up.model.Object("level1", type_level)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("TPP", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_goods1)
        problem.add_object(object_goods2)
        problem.add_object(object_goods3)
        problem.add_object(object_truck1)
        problem.add_object(object_market1)
        problem.add_object(object_depot1)
        problem.add_object(object_level0)
        problem.add_object(object_level1)
        problem.add_fluent(fluent_loaded, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_ready_to_load, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_stored, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_sale, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_next, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_connected, default_initial_value=emgr.FALSE())
        act_drive = up.model.InstantaneousAction("drive", _parameters=OrderedDict([("t", type_truck), ("from", type_place), ("to", type_place)]))
        act_drive.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("from", type_place, env))), fluent_connected(emgr.ParameterExp(up.model.Parameter("from", type_place, env)), emgr.ParameterExp(up.model.Parameter("to", type_place, env)))))
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("from", type_place, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("to", type_place, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drive)
        act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("g", type_goods), ("t", type_truck), ("m", type_market), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env))), fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_load.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_load)
        act_unload = up.model.InstantaneousAction("unload", _parameters=OrderedDict([("g", type_goods), ("t", type_truck), ("d", type_depot), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("d", type_depot, env))), fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_unload.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_unload)
        act_buy = up.model.InstantaneousAction("buy", _parameters=OrderedDict([("t", type_truck), ("g", type_goods), ("m", type_market), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_buy.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env))), fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_buy.add_effect(fluent=fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_buy)
        problem.set_initial_value(fluent_next(emgr.ObjectExp(object_level1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_depot1), emgr.ObjectExp(object_market1)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_market1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_stored(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_level1)), fluent_stored(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_level1)), fluent_stored(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_level1))))

        return problem

    def get_description(self):
        return 'Task TPP P03 from classical IPC transformed with UP'

    def version(self):
        return 1


class tpp_pfile6(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_goods = tm.UserType("goods", type_locatable)
        type_truck = tm.UserType("truck", type_locatable)
        type_level = tm.UserType("level")
        type_place = tm.UserType("place")
        type_market = tm.UserType("market", type_place)
        type_depot = tm.UserType("depot", type_place)
        fluent_loaded = up.model.Fluent("loaded", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("t", type_truck), ("l", type_level)]))
        fluent_ready_to_load = up.model.Fluent("ready-to-load", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("m", type_market), ("l", type_level)]))
        fluent_stored = up.model.Fluent("stored", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("l", type_level)]))
        fluent_on_sale = up.model.Fluent("on-sale", tm.BoolType(), _signature=OrderedDict([("g", type_goods), ("m", type_market), ("l", type_level)]))
        fluent_next = up.model.Fluent("next", tm.BoolType(), _signature=OrderedDict([("l1", type_level), ("l2", type_level)]))
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("t", type_truck), ("p", type_place)]))
        fluent_connected = up.model.Fluent("connected", tm.BoolType(), _signature=OrderedDict([("p1", type_place), ("p2", type_place)]))
        object_goods1 = up.model.Object("goods1", type_goods)
        object_goods2 = up.model.Object("goods2", type_goods)
        object_goods3 = up.model.Object("goods3", type_goods)
        object_goods4 = up.model.Object("goods4", type_goods)
        object_goods5 = up.model.Object("goods5", type_goods)
        object_goods6 = up.model.Object("goods6", type_goods)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_truck2 = up.model.Object("truck2", type_truck)
        object_market1 = up.model.Object("market1", type_market)
        object_market2 = up.model.Object("market2", type_market)
        object_depot1 = up.model.Object("depot1", type_depot)
        object_level0 = up.model.Object("level0", type_level)
        object_level1 = up.model.Object("level1", type_level)
        object_level2 = up.model.Object("level2", type_level)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("TPP", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_goods1)
        problem.add_object(object_goods2)
        problem.add_object(object_goods3)
        problem.add_object(object_goods4)
        problem.add_object(object_goods5)
        problem.add_object(object_goods6)
        problem.add_object(object_truck1)
        problem.add_object(object_truck2)
        problem.add_object(object_market1)
        problem.add_object(object_market2)
        problem.add_object(object_depot1)
        problem.add_object(object_level0)
        problem.add_object(object_level1)
        problem.add_object(object_level2)
        problem.add_fluent(fluent_loaded, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_ready_to_load, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_stored, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_sale, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_next, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_connected, default_initial_value=emgr.FALSE())
        act_drive = up.model.InstantaneousAction("drive", _parameters=OrderedDict([("t", type_truck), ("from", type_place), ("to", type_place)]))
        act_drive.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("from", type_place, env))), fluent_connected(emgr.ParameterExp(up.model.Parameter("from", type_place, env)), emgr.ParameterExp(up.model.Parameter("to", type_place, env)))))
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("from", type_place, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("to", type_place, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drive)
        act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("g", type_goods), ("t", type_truck), ("m", type_market), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env))), fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_load.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_load.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_load)
        act_unload = up.model.InstantaneousAction("unload", _parameters=OrderedDict([("g", type_goods), ("t", type_truck), ("d", type_depot), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("d", type_depot, env))), fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_unload.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_loaded(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_unload.add_effect(fluent=fluent_stored(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_unload)
        act_buy = up.model.InstantaneousAction("buy", _parameters=OrderedDict([("t", type_truck), ("g", type_goods), ("m", type_market), ("l1", type_level), ("l2", type_level), ("l3", type_level), ("l4", type_level)]))
        act_buy.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("t", type_truck, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env))), fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l2", type_level, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), fluent_next(emgr.ParameterExp(up.model.Parameter("l4", type_level, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env)))))
        act_buy.add_effect(fluent=fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l1", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_on_sale(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l2", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l4", type_level, env))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_buy.add_effect(fluent=fluent_ready_to_load(emgr.ParameterExp(up.model.Parameter("g", type_goods, env)), emgr.ParameterExp(up.model.Parameter("m", type_market, env)), emgr.ParameterExp(up.model.Parameter("l3", type_level, env))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_buy)
        problem.set_initial_value(fluent_next(emgr.ObjectExp(object_level1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_next(emgr.ObjectExp(object_level2), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods4), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods4), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods5), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods5), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods6), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_ready_to_load(emgr.ObjectExp(object_goods6), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods4), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods5), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_stored(emgr.ObjectExp(object_goods6), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_truck2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_truck2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_truck2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods4), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods4), emgr.ObjectExp(object_truck2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods5), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods5), emgr.ObjectExp(object_truck2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods6), emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_loaded(emgr.ObjectExp(object_goods6), emgr.ObjectExp(object_truck2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_market1), emgr.ObjectExp(object_market2)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_market2), emgr.ObjectExp(object_market1)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_depot1), emgr.ObjectExp(object_market2)), emgr.TRUE())
        problem.set_initial_value(fluent_connected(emgr.ObjectExp(object_market2), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level2)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods4), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level2)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods5), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level2)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods6), emgr.ObjectExp(object_market1), emgr.ObjectExp(object_level2)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods4), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods5), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_on_sale(emgr.ObjectExp(object_goods6), emgr.ObjectExp(object_market2), emgr.ObjectExp(object_level0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck2), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_stored(emgr.ObjectExp(object_goods1), emgr.ObjectExp(object_level1)), fluent_stored(emgr.ObjectExp(object_goods2), emgr.ObjectExp(object_level2)), fluent_stored(emgr.ObjectExp(object_goods3), emgr.ObjectExp(object_level1)), fluent_stored(emgr.ObjectExp(object_goods4), emgr.ObjectExp(object_level1)), fluent_stored(emgr.ObjectExp(object_goods5), emgr.ObjectExp(object_level1)), fluent_stored(emgr.ObjectExp(object_goods6), emgr.ObjectExp(object_level1))))

        return problem

    def get_description(self):
        return 'Task TPP P06 from classical IPC transformed with UP'

    def version(self):
        return 1
