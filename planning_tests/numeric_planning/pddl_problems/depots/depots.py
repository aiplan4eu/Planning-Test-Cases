from fractions import Fraction
from collections import OrderedDict
import unified_planning as up
from unified_planning.shortcuts import *
from planning_tests.commons.problem import TestCaseProblem



class depots_pfile1(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):

        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_place = tm.UserType("place")
        type_surface = tm.UserType("surface", type_locatable)
        type_crate = tm.UserType("crate", type_surface)
        type_truck = tm.UserType("truck", type_locatable)
        type_hoist = tm.UserType("hoist", type_locatable)
        type_depot = tm.UserType("depot", type_place)
        type_distributor = tm.UserType("distributor", type_place)
        type_pallet = tm.UserType("pallet", type_surface)
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_locatable), ("y", type_place)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_surface)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_truck)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_hoist), ("y", type_crate)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_hoist)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_surface)]))
        fluent_load_limit = up.model.Fluent("load_limit", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_current_load = up.model.Fluent("current_load", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_weight = up.model.Fluent("weight", tm.RealType(None, None), _signature=OrderedDict([("c", type_crate)]))
        fluent_fuel_cost = up.model.Fluent("fuel-cost", tm.RealType(None, None), _signature=OrderedDict([]))
        object_depot0 = up.model.Object("depot0", type_depot)
        object_distributor0 = up.model.Object("distributor0", type_distributor)
        object_distributor1 = up.model.Object("distributor1", type_distributor)
        object_truck0 = up.model.Object("truck0", type_truck)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_pallet0 = up.model.Object("pallet0", type_pallet)
        object_pallet1 = up.model.Object("pallet1", type_pallet)
        object_pallet2 = up.model.Object("pallet2", type_pallet)
        object_crate0 = up.model.Object("crate0", type_crate)
        object_crate1 = up.model.Object("crate1", type_crate)
        object_hoist0 = up.model.Object("hoist0", type_hoist)
        object_hoist1 = up.model.Object("hoist1", type_hoist)
        object_hoist2 = up.model.Object("hoist2", type_hoist)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob1818", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_load_limit)
        problem.add_fluent(fluent_current_load)
        problem.add_fluent(fluent_weight)
        problem.add_fluent(fluent_fuel_cost)
        act_Drive = up.model.InstantaneousAction("Drive", _parameters=OrderedDict([("x", type_truck), ("y", type_place), ("z", type_place)]))
        act_Drive.add_precondition(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))))
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("z", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drive.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(10), condition=emgr.TRUE())
        problem.add_action(act_Drive)
        act_Lift = up.model.InstantaneousAction("Lift", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Lift.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_Lift)
        act_Drop = up.model.InstantaneousAction("Drop", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Drop.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_surface)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_Drop)
        act_Load = up.model.InstantaneousAction("Load", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), emgr.LE(emgr.Plus(fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate)))), fluent_load_limit(emgr.ParameterExp(up.model.Parameter("z", type_truck))))))
        act_Load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_increase_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Load)
        act_Unload = up.model.InstantaneousAction("Unload", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck)))))
        act_Unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Unload.add_decrease_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Unload)
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck0)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck0)), emgr.Int(323))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck1)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck1)), emgr.Int(220))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate0)), emgr.Int(11))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate1)), emgr.Int(86))
        problem.set_initial_value(emgr.FluentExp(fluent_fuel_cost), emgr.Int(0))
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet2)), fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet1))))
        return problem

    def get_description(self):
        return 'depots'

    def version(self):
        return 1

class depots_pfile2(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):

        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_place = tm.UserType("place")
        type_surface = tm.UserType("surface", type_locatable)
        type_crate = tm.UserType("crate", type_surface)
        type_truck = tm.UserType("truck", type_locatable)
        type_hoist = tm.UserType("hoist", type_locatable)
        type_depot = tm.UserType("depot", type_place)
        type_distributor = tm.UserType("distributor", type_place)
        type_pallet = tm.UserType("pallet", type_surface)
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_locatable), ("y", type_place)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_surface)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_truck)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_hoist), ("y", type_crate)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_hoist)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_surface)]))
        fluent_load_limit = up.model.Fluent("load_limit", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_current_load = up.model.Fluent("current_load", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_weight = up.model.Fluent("weight", tm.RealType(None, None), _signature=OrderedDict([("c", type_crate)]))
        fluent_fuel_cost = up.model.Fluent("fuel-cost", tm.RealType(None, None), _signature=OrderedDict([]))
        object_depot0 = up.model.Object("depot0", type_depot)
        object_distributor0 = up.model.Object("distributor0", type_distributor)
        object_distributor1 = up.model.Object("distributor1", type_distributor)
        object_truck0 = up.model.Object("truck0", type_truck)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_pallet0 = up.model.Object("pallet0", type_pallet)
        object_pallet1 = up.model.Object("pallet1", type_pallet)
        object_pallet2 = up.model.Object("pallet2", type_pallet)
        object_crate0 = up.model.Object("crate0", type_crate)
        object_crate1 = up.model.Object("crate1", type_crate)
        object_crate2 = up.model.Object("crate2", type_crate)
        object_crate3 = up.model.Object("crate3", type_crate)
        object_hoist0 = up.model.Object("hoist0", type_hoist)
        object_hoist1 = up.model.Object("hoist1", type_hoist)
        object_hoist2 = up.model.Object("hoist2", type_hoist)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob7512", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_crate2)
        problem.add_object(object_crate3)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_load_limit)
        problem.add_fluent(fluent_current_load)
        problem.add_fluent(fluent_weight)
        problem.add_fluent(fluent_fuel_cost)
        act_Drive = up.model.InstantaneousAction("Drive", _parameters=OrderedDict([("x", type_truck), ("y", type_place), ("z", type_place)]))
        act_Drive.add_precondition(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))))
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("z", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drive.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(10), condition=emgr.TRUE())
        problem.add_action(act_Drive)
        act_Lift = up.model.InstantaneousAction("Lift", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Lift.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_Lift)
        act_Drop = up.model.InstantaneousAction("Drop", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Drop.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_surface)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_Drop)
        act_Load = up.model.InstantaneousAction("Load", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), emgr.LE(emgr.Plus(fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate)))), fluent_load_limit(emgr.ParameterExp(up.model.Parameter("z", type_truck))))))
        act_Load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_increase_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Load)
        act_Unload = up.model.InstantaneousAction("Unload", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck)))))
        act_Unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Unload.add_decrease_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Unload)
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck0)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck0)), emgr.Int(411))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck1)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck1)), emgr.Int(390))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate0)), emgr.Int(32))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate1)), emgr.Int(4))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate2)), emgr.Int(89))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate3)), emgr.Int(62))
        problem.set_initial_value(emgr.FluentExp(fluent_fuel_cost), emgr.Int(0))
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet2)), fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_crate3)), fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet0)), fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_pallet1))))
       
        return problem

    def get_description(self):
        return 'depots'

    def version(self):
        return 1

class depots_pfile3(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_place = tm.UserType("place")
        type_surface = tm.UserType("surface", type_locatable)
        type_crate = tm.UserType("crate", type_surface)
        type_truck = tm.UserType("truck", type_locatable)
        type_hoist = tm.UserType("hoist", type_locatable)
        type_depot = tm.UserType("depot", type_place)
        type_distributor = tm.UserType("distributor", type_place)
        type_pallet = tm.UserType("pallet", type_surface)
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_locatable), ("y", type_place)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_surface)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_truck)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_hoist), ("y", type_crate)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_hoist)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_surface)]))
        fluent_load_limit = up.model.Fluent("load_limit", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_current_load = up.model.Fluent("current_load", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_weight = up.model.Fluent("weight", tm.RealType(None, None), _signature=OrderedDict([("c", type_crate)]))
        fluent_fuel_cost = up.model.Fluent("fuel-cost", tm.RealType(None, None), _signature=OrderedDict([]))
        object_depot0 = up.model.Object("depot0", type_depot)
        object_distributor0 = up.model.Object("distributor0", type_distributor)
        object_distributor1 = up.model.Object("distributor1", type_distributor)
        object_truck0 = up.model.Object("truck0", type_truck)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_pallet0 = up.model.Object("pallet0", type_pallet)
        object_pallet1 = up.model.Object("pallet1", type_pallet)
        object_pallet2 = up.model.Object("pallet2", type_pallet)
        object_crate0 = up.model.Object("crate0", type_crate)
        object_crate1 = up.model.Object("crate1", type_crate)
        object_crate2 = up.model.Object("crate2", type_crate)
        object_crate3 = up.model.Object("crate3", type_crate)
        object_crate4 = up.model.Object("crate4", type_crate)
        object_crate5 = up.model.Object("crate5", type_crate)
        object_hoist0 = up.model.Object("hoist0", type_hoist)
        object_hoist1 = up.model.Object("hoist1", type_hoist)
        object_hoist2 = up.model.Object("hoist2", type_hoist)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob1935", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_crate2)
        problem.add_object(object_crate3)
        problem.add_object(object_crate4)
        problem.add_object(object_crate5)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_load_limit)
        problem.add_fluent(fluent_current_load)
        problem.add_fluent(fluent_weight)
        problem.add_fluent(fluent_fuel_cost)
        act_Drive = up.model.InstantaneousAction("Drive", _parameters=OrderedDict([("x", type_truck), ("y", type_place), ("z", type_place)]))
        act_Drive.add_precondition(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))))
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("z", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drive.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(10), condition=emgr.TRUE())
        problem.add_action(act_Drive)
        act_Lift = up.model.InstantaneousAction("Lift", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Lift.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_Lift)
        act_Drop = up.model.InstantaneousAction("Drop", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Drop.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_surface)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_Drop)
        act_Load = up.model.InstantaneousAction("Load", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), emgr.LE(emgr.Plus(fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate)))), fluent_load_limit(emgr.ParameterExp(up.model.Parameter("z", type_truck))))))
        act_Load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_increase_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Load)
        act_Unload = up.model.InstantaneousAction("Unload", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck)))))
        act_Unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Unload.add_decrease_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Unload)
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate5)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck0)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck0)), emgr.Int(457))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck1)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck1)), emgr.Int(331))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate0)), emgr.Int(99))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate1)), emgr.Int(89))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate2)), emgr.Int(67))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate3)), emgr.Int(81))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate4)), emgr.Int(4))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate5)), emgr.Int(50))
        problem.set_initial_value(emgr.FluentExp(fluent_fuel_cost), emgr.Int(0))
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_crate1)), fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet2)), fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet0)), fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate2)), fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_pallet1)), fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_crate0))))
       
        return problem

    def get_description(self):
        return 'depots'

    def version(self):
        return 1


#medium problems

class depots_pfile12(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):

        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_place = tm.UserType("place")
        type_surface = tm.UserType("surface", type_locatable)
        type_crate = tm.UserType("crate", type_surface)
        type_truck = tm.UserType("truck", type_locatable)
        type_hoist = tm.UserType("hoist", type_locatable)
        type_depot = tm.UserType("depot", type_place)
        type_distributor = tm.UserType("distributor", type_place)
        type_pallet = tm.UserType("pallet", type_surface)
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_locatable), ("y", type_place)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_surface)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_truck)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_hoist), ("y", type_crate)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_hoist)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_surface)]))
        fluent_load_limit = up.model.Fluent("load_limit", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_current_load = up.model.Fluent("current_load", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_weight = up.model.Fluent("weight", tm.RealType(None, None), _signature=OrderedDict([("c", type_crate)]))
        fluent_fuel_cost = up.model.Fluent("fuel-cost", tm.RealType(None, None), _signature=OrderedDict([]))
        object_depot0 = up.model.Object("depot0", type_depot)
        object_depot1 = up.model.Object("depot1", type_depot)
        object_depot2 = up.model.Object("depot2", type_depot)
        object_distributor0 = up.model.Object("distributor0", type_distributor)
        object_distributor1 = up.model.Object("distributor1", type_distributor)
        object_distributor2 = up.model.Object("distributor2", type_distributor)
        object_truck0 = up.model.Object("truck0", type_truck)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_pallet0 = up.model.Object("pallet0", type_pallet)
        object_pallet1 = up.model.Object("pallet1", type_pallet)
        object_pallet2 = up.model.Object("pallet2", type_pallet)
        object_pallet3 = up.model.Object("pallet3", type_pallet)
        object_pallet4 = up.model.Object("pallet4", type_pallet)
        object_pallet5 = up.model.Object("pallet5", type_pallet)
        object_crate0 = up.model.Object("crate0", type_crate)
        object_crate1 = up.model.Object("crate1", type_crate)
        object_crate2 = up.model.Object("crate2", type_crate)
        object_crate3 = up.model.Object("crate3", type_crate)
        object_crate4 = up.model.Object("crate4", type_crate)
        object_crate5 = up.model.Object("crate5", type_crate)
        object_crate6 = up.model.Object("crate6", type_crate)
        object_crate7 = up.model.Object("crate7", type_crate)
        object_crate8 = up.model.Object("crate8", type_crate)
        object_crate9 = up.model.Object("crate9", type_crate)
        object_crate10 = up.model.Object("crate10", type_crate)
        object_crate11 = up.model.Object("crate11", type_crate)
        object_crate12 = up.model.Object("crate12", type_crate)
        object_crate13 = up.model.Object("crate13", type_crate)
        object_crate14 = up.model.Object("crate14", type_crate)
        object_hoist0 = up.model.Object("hoist0", type_hoist)
        object_hoist1 = up.model.Object("hoist1", type_hoist)
        object_hoist2 = up.model.Object("hoist2", type_hoist)
        object_hoist3 = up.model.Object("hoist3", type_hoist)
        object_hoist4 = up.model.Object("hoist4", type_hoist)
        object_hoist5 = up.model.Object("hoist5", type_hoist)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob9876", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_depot1)
        problem.add_object(object_depot2)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_distributor2)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_pallet3)
        problem.add_object(object_pallet4)
        problem.add_object(object_pallet5)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_crate2)
        problem.add_object(object_crate3)
        problem.add_object(object_crate4)
        problem.add_object(object_crate5)
        problem.add_object(object_crate6)
        problem.add_object(object_crate7)
        problem.add_object(object_crate8)
        problem.add_object(object_crate9)
        problem.add_object(object_crate10)
        problem.add_object(object_crate11)
        problem.add_object(object_crate12)
        problem.add_object(object_crate13)
        problem.add_object(object_crate14)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_object(object_hoist3)
        problem.add_object(object_hoist4)
        problem.add_object(object_hoist5)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_load_limit)
        problem.add_fluent(fluent_current_load)
        problem.add_fluent(fluent_weight)
        problem.add_fluent(fluent_fuel_cost)
        act_Drive = up.model.InstantaneousAction("Drive", _parameters=OrderedDict([("x", type_truck), ("y", type_place), ("z", type_place)]))
        act_Drive.add_precondition(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))))
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("z", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drive.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(10), condition=emgr.TRUE())
        problem.add_action(act_Drive)
        act_Lift = up.model.InstantaneousAction("Lift", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Lift.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_Lift)
        act_Drop = up.model.InstantaneousAction("Drop", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Drop.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_surface)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_Drop)
        act_Load = up.model.InstantaneousAction("Load", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), emgr.LE(emgr.Plus(fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate)))), fluent_load_limit(emgr.ParameterExp(up.model.Parameter("z", type_truck))))))
        act_Load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_increase_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Load)
        act_Unload = up.model.InstantaneousAction("Unload", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck)))))
        act_Unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Unload.add_decrease_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Unload)
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate12)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet4), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate14)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet5), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate13)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck0)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck0)), emgr.Int(390))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck1)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck1)), emgr.Int(246))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist4), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist5), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist5)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet5)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate0)), emgr.Int(41))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate1)), emgr.Int(43))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet3)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate2)), emgr.Int(25))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate3)), emgr.Int(16))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate4)), emgr.Int(5))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate5)), emgr.Int(16))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate6), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate6), emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate6)), emgr.Int(62))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate7), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate7), emgr.ObjectExp(object_crate6)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate7)), emgr.Int(87))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate8), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate8), emgr.ObjectExp(object_crate7)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate8)), emgr.Int(30))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate9), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate9), emgr.ObjectExp(object_crate8)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate9)), emgr.Int(49))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate10), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate10), emgr.ObjectExp(object_crate5)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate10)), emgr.Int(31))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate11), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate11), emgr.ObjectExp(object_pallet4)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate11)), emgr.Int(81))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate12), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate12), emgr.ObjectExp(object_crate10)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate12)), emgr.Int(4))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate13), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate13), emgr.ObjectExp(object_crate9)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate13)), emgr.Int(73))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate14), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate14), emgr.ObjectExp(object_crate11)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate14)), emgr.Int(31))
        problem.set_initial_value(emgr.FluentExp(fluent_fuel_cost), emgr.Int(0))
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet4)), fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_crate12)), fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_crate0)), fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate9)), fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_pallet0)), fluent_on(emgr.ObjectExp(object_crate6), emgr.ObjectExp(object_crate2)), fluent_on(emgr.ObjectExp(object_crate9), emgr.ObjectExp(object_pallet2)), fluent_on(emgr.ObjectExp(object_crate10), emgr.ObjectExp(object_crate13)), fluent_on(emgr.ObjectExp(object_crate12), emgr.ObjectExp(object_pallet5)), fluent_on(emgr.ObjectExp(object_crate13), emgr.ObjectExp(object_pallet1)), fluent_on(emgr.ObjectExp(object_crate14), emgr.ObjectExp(object_crate10))))
        return problem

    def get_description(self):
        return 'depots'

    def version(self):
        return 1

class depots_pfile10(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):

        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_place = tm.UserType("place")
        type_surface = tm.UserType("surface", type_locatable)
        type_crate = tm.UserType("crate", type_surface)
        type_truck = tm.UserType("truck", type_locatable)
        type_hoist = tm.UserType("hoist", type_locatable)
        type_depot = tm.UserType("depot", type_place)
        type_distributor = tm.UserType("distributor", type_place)
        type_pallet = tm.UserType("pallet", type_surface)
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_locatable), ("y", type_place)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_surface)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_truck)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_hoist), ("y", type_crate)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_hoist)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_surface)]))
        fluent_load_limit = up.model.Fluent("load_limit", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_current_load = up.model.Fluent("current_load", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_weight = up.model.Fluent("weight", tm.RealType(None, None), _signature=OrderedDict([("c", type_crate)]))
        fluent_fuel_cost = up.model.Fluent("fuel-cost", tm.RealType(None, None), _signature=OrderedDict([]))
        object_depot0 = up.model.Object("depot0", type_depot)
        object_depot1 = up.model.Object("depot1", type_depot)
        object_depot2 = up.model.Object("depot2", type_depot)
        object_distributor0 = up.model.Object("distributor0", type_distributor)
        object_distributor1 = up.model.Object("distributor1", type_distributor)
        object_distributor2 = up.model.Object("distributor2", type_distributor)
        object_truck0 = up.model.Object("truck0", type_truck)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_pallet0 = up.model.Object("pallet0", type_pallet)
        object_pallet1 = up.model.Object("pallet1", type_pallet)
        object_pallet2 = up.model.Object("pallet2", type_pallet)
        object_pallet3 = up.model.Object("pallet3", type_pallet)
        object_pallet4 = up.model.Object("pallet4", type_pallet)
        object_pallet5 = up.model.Object("pallet5", type_pallet)
        object_crate0 = up.model.Object("crate0", type_crate)
        object_crate1 = up.model.Object("crate1", type_crate)
        object_crate2 = up.model.Object("crate2", type_crate)
        object_crate3 = up.model.Object("crate3", type_crate)
        object_crate4 = up.model.Object("crate4", type_crate)
        object_crate5 = up.model.Object("crate5", type_crate)
        object_hoist0 = up.model.Object("hoist0", type_hoist)
        object_hoist1 = up.model.Object("hoist1", type_hoist)
        object_hoist2 = up.model.Object("hoist2", type_hoist)
        object_hoist3 = up.model.Object("hoist3", type_hoist)
        object_hoist4 = up.model.Object("hoist4", type_hoist)
        object_hoist5 = up.model.Object("hoist5", type_hoist)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob7654", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_depot1)
        problem.add_object(object_depot2)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_distributor2)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_pallet3)
        problem.add_object(object_pallet4)
        problem.add_object(object_pallet5)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_crate2)
        problem.add_object(object_crate3)
        problem.add_object(object_crate4)
        problem.add_object(object_crate5)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_object(object_hoist3)
        problem.add_object(object_hoist4)
        problem.add_object(object_hoist5)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_load_limit)
        problem.add_fluent(fluent_current_load)
        problem.add_fluent(fluent_weight)
        problem.add_fluent(fluent_fuel_cost)
        act_Drive = up.model.InstantaneousAction("Drive", _parameters=OrderedDict([("x", type_truck), ("y", type_place), ("z", type_place)]))
        act_Drive.add_precondition(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))))
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("z", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drive.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(10), condition=emgr.TRUE())
        problem.add_action(act_Drive)
        act_Lift = up.model.InstantaneousAction("Lift", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Lift.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_Lift)
        act_Drop = up.model.InstantaneousAction("Drop", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Drop.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_surface)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_Drop)
        act_Load = up.model.InstantaneousAction("Load", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), emgr.LE(emgr.Plus(fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate)))), fluent_load_limit(emgr.ParameterExp(up.model.Parameter("z", type_truck))))))
        act_Load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_increase_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Load)
        act_Unload = up.model.InstantaneousAction("Unload", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck)))))
        act_Unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Unload.add_decrease_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Unload)
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate5)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet4), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_pallet4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet5), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck0)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck0)), emgr.Int(370))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck1)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck1)), emgr.Int(287))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist4), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist5), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist5)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate0)), emgr.Int(96))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate1)), emgr.Int(72))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet5)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate2)), emgr.Int(74))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate3)), emgr.Int(16))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate4)), emgr.Int(23))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_pallet3)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate5)), emgr.Int(42))
        problem.set_initial_value(emgr.FluentExp(fluent_fuel_cost), emgr.Int(0))
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_crate4)), fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet3)), fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_pallet0)), fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_pallet5)))) 
        return problem

    def get_description(self):
        return 'depots'

    def version(self):
        return 1

class depots_pfile11(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):

        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_locatable = tm.UserType("locatable")
        type_place = tm.UserType("place")
        type_surface = tm.UserType("surface", type_locatable)
        type_crate = tm.UserType("crate", type_surface)
        type_truck = tm.UserType("truck", type_locatable)
        type_hoist = tm.UserType("hoist", type_locatable)
        type_depot = tm.UserType("depot", type_place)
        type_distributor = tm.UserType("distributor", type_place)
        type_pallet = tm.UserType("pallet", type_surface)
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_locatable), ("y", type_place)]))
        fluent_on = up.model.Fluent("on", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_surface)]))
        fluent_in = up.model.Fluent("in", tm.BoolType(), _signature=OrderedDict([("x", type_crate), ("y", type_truck)]))
        fluent_lifting = up.model.Fluent("lifting", tm.BoolType(), _signature=OrderedDict([("x", type_hoist), ("y", type_crate)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("x", type_hoist)]))
        fluent_clear = up.model.Fluent("clear", tm.BoolType(), _signature=OrderedDict([("x", type_surface)]))
        fluent_load_limit = up.model.Fluent("load_limit", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_current_load = up.model.Fluent("current_load", tm.RealType(None, None), _signature=OrderedDict([("t", type_truck)]))
        fluent_weight = up.model.Fluent("weight", tm.RealType(None, None), _signature=OrderedDict([("c", type_crate)]))
        fluent_fuel_cost = up.model.Fluent("fuel-cost", tm.RealType(None, None), _signature=OrderedDict([]))
        object_depot0 = up.model.Object("depot0", type_depot)
        object_depot1 = up.model.Object("depot1", type_depot)
        object_depot2 = up.model.Object("depot2", type_depot)
        object_distributor0 = up.model.Object("distributor0", type_distributor)
        object_distributor1 = up.model.Object("distributor1", type_distributor)
        object_distributor2 = up.model.Object("distributor2", type_distributor)
        object_truck0 = up.model.Object("truck0", type_truck)
        object_truck1 = up.model.Object("truck1", type_truck)
        object_pallet0 = up.model.Object("pallet0", type_pallet)
        object_pallet1 = up.model.Object("pallet1", type_pallet)
        object_pallet2 = up.model.Object("pallet2", type_pallet)
        object_pallet3 = up.model.Object("pallet3", type_pallet)
        object_pallet4 = up.model.Object("pallet4", type_pallet)
        object_pallet5 = up.model.Object("pallet5", type_pallet)
        object_crate0 = up.model.Object("crate0", type_crate)
        object_crate1 = up.model.Object("crate1", type_crate)
        object_crate2 = up.model.Object("crate2", type_crate)
        object_crate3 = up.model.Object("crate3", type_crate)
        object_crate4 = up.model.Object("crate4", type_crate)
        object_crate5 = up.model.Object("crate5", type_crate)
        object_crate6 = up.model.Object("crate6", type_crate)
        object_crate7 = up.model.Object("crate7", type_crate)
        object_crate8 = up.model.Object("crate8", type_crate)
        object_crate9 = up.model.Object("crate9", type_crate)
        object_hoist0 = up.model.Object("hoist0", type_hoist)
        object_hoist1 = up.model.Object("hoist1", type_hoist)
        object_hoist2 = up.model.Object("hoist2", type_hoist)
        object_hoist3 = up.model.Object("hoist3", type_hoist)
        object_hoist4 = up.model.Object("hoist4", type_hoist)
        object_hoist5 = up.model.Object("hoist5", type_hoist)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("depotprob8765", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_depot0)
        problem.add_object(object_depot1)
        problem.add_object(object_depot2)
        problem.add_object(object_distributor0)
        problem.add_object(object_distributor1)
        problem.add_object(object_distributor2)
        problem.add_object(object_truck0)
        problem.add_object(object_truck1)
        problem.add_object(object_pallet0)
        problem.add_object(object_pallet1)
        problem.add_object(object_pallet2)
        problem.add_object(object_pallet3)
        problem.add_object(object_pallet4)
        problem.add_object(object_pallet5)
        problem.add_object(object_crate0)
        problem.add_object(object_crate1)
        problem.add_object(object_crate2)
        problem.add_object(object_crate3)
        problem.add_object(object_crate4)
        problem.add_object(object_crate5)
        problem.add_object(object_crate6)
        problem.add_object(object_crate7)
        problem.add_object(object_crate8)
        problem.add_object(object_crate9)
        problem.add_object(object_hoist0)
        problem.add_object(object_hoist1)
        problem.add_object(object_hoist2)
        problem.add_object(object_hoist3)
        problem.add_object(object_hoist4)
        problem.add_object(object_hoist5)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_lifting, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_clear, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_load_limit)
        problem.add_fluent(fluent_current_load)
        problem.add_fluent(fluent_weight)
        problem.add_fluent(fluent_fuel_cost)
        act_Drive = up.model.InstantaneousAction("Drive", _parameters=OrderedDict([("x", type_truck), ("y", type_place), ("z", type_place)]))
        act_Drive.add_precondition(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))))
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("y", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drive.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_truck)), emgr.ParameterExp(up.model.Parameter("z", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drive.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(10), condition=emgr.TRUE())
        problem.add_action(act_Drive)
        act_Lift = up.model.InstantaneousAction("Lift", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Lift.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Lift.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Lift.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Lift.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_cost), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_Lift)
        act_Drop = up.model.InstantaneousAction("Drop", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_surface), ("p", type_place)]))
        act_Drop.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_surface)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate)))))
        act_Drop.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("p", type_place))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_clear(emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Drop.add_effect(fluent=fluent_on(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_surface))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_Drop)
        act_Load = up.model.InstantaneousAction("Load", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Load.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), emgr.LE(emgr.Plus(fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate)))), fluent_load_limit(emgr.ParameterExp(up.model.Parameter("z", type_truck))))))
        act_Load.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Load.add_increase_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Load)
        act_Unload = up.model.InstantaneousAction("Unload", _parameters=OrderedDict([("x", type_hoist), ("y", type_crate), ("z", type_truck), ("p", type_place)]))
        act_Unload.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_at(emgr.ParameterExp(up.model.Parameter("z", type_truck)), emgr.ParameterExp(up.model.Parameter("p", type_place))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck)))))
        act_Unload.add_effect(fluent=fluent_in(emgr.ParameterExp(up.model.Parameter("y", type_crate)), emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_hoist))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_Unload.add_effect(fluent=fluent_lifting(emgr.ParameterExp(up.model.Parameter("x", type_hoist)), emgr.ParameterExp(up.model.Parameter("y", type_crate))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_Unload.add_decrease_effect(fluent=fluent_current_load(emgr.ParameterExp(up.model.Parameter("z", type_truck))), value=fluent_weight(emgr.ParameterExp(up.model.Parameter("y", type_crate))), condition=emgr.TRUE())
        problem.add_action(act_Unload)
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet2), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate9)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_pallet3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet4), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_pallet4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_pallet5), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_clear(emgr.ObjectExp(object_crate8)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck0), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck0)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck0)), emgr.Int(336))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_truck1), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_current_load(emgr.ObjectExp(object_truck1)), emgr.Int(0))
        problem.set_initial_value(fluent_load_limit(emgr.ObjectExp(object_truck1)), emgr.Int(366))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist0), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist0)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist1), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist1)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist2), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist2)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist3), emgr.ObjectExp(object_distributor0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist3)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist4), emgr.ObjectExp(object_distributor1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist4)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_hoist5), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_hoist5)), emgr.TRUE())
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_pallet1)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate0)), emgr.Int(42))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_depot0)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet0)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate1)), emgr.Int(6))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet2)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate2)), emgr.Int(74))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_depot1)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate0)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate3)), emgr.Int(64))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_crate2)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate4)), emgr.Int(61))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_crate4)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate5)), emgr.Int(79))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate6), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate6), emgr.ObjectExp(object_pallet5)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate6)), emgr.Int(29))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate7), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate7), emgr.ObjectExp(object_crate6)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate7)), emgr.Int(77))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate8), emgr.ObjectExp(object_distributor2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate8), emgr.ObjectExp(object_crate7)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate8)), emgr.Int(19))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_crate9), emgr.ObjectExp(object_depot2)), emgr.TRUE())
        problem.set_initial_value(fluent_on(emgr.ObjectExp(object_crate9), emgr.ObjectExp(object_crate5)), emgr.TRUE())
        problem.set_initial_value(fluent_weight(emgr.ObjectExp(object_crate9)), emgr.Int(98))
        problem.set_initial_value(emgr.FluentExp(fluent_fuel_cost), emgr.Int(0))
        problem.add_goal(goal=emgr.And(fluent_on(emgr.ObjectExp(object_crate0), emgr.ObjectExp(object_crate7)), fluent_on(emgr.ObjectExp(object_crate1), emgr.ObjectExp(object_pallet4)), fluent_on(emgr.ObjectExp(object_crate2), emgr.ObjectExp(object_pallet5)), fluent_on(emgr.ObjectExp(object_crate3), emgr.ObjectExp(object_crate9)), fluent_on(emgr.ObjectExp(object_crate4), emgr.ObjectExp(object_pallet0)), fluent_on(emgr.ObjectExp(object_crate5), emgr.ObjectExp(object_pallet2)), fluent_on(emgr.ObjectExp(object_crate6), emgr.ObjectExp(object_crate5)), fluent_on(emgr.ObjectExp(object_crate7), emgr.ObjectExp(object_crate1)), fluent_on(emgr.ObjectExp(object_crate8), emgr.ObjectExp(object_pallet3)), fluent_on(emgr.ObjectExp(object_crate9), emgr.ObjectExp(object_crate2))))        
        return problem

    def get_description(self):
        return 'depots'

    def version(self):
        return 1