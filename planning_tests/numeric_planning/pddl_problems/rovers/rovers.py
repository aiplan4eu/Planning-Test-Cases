from fractions import Fraction
from collections import OrderedDict
import unified_planning as up
from unified_planning.shortcuts import *
from planning_tests.commons.problem import TestCaseProblem


class rovers_pfile3(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):

        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_rover = tm.UserType("rover")
        type_waypoint = tm.UserType("waypoint")
        type_lander = tm.UserType("lander")
        type_store = tm.UserType("store")
        type_camera = tm.UserType("camera")
        type_mode = tm.UserType("mode")
        type_objective = tm.UserType("objective")
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_rover), ("y", type_waypoint)]))
        fluent_at_lander = up.model.Fluent("at_lander", tm.BoolType(), _signature=OrderedDict([("x", type_lander), ("y", type_waypoint)]))
        fluent_can_traverse = up.model.Fluent("can_traverse", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("x", type_waypoint), ("y", type_waypoint)]))
        fluent_equipped_for_soil_analysis = up.model.Fluent("equipped_for_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_rock_analysis = up.model.Fluent("equipped_for_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_imaging = up.model.Fluent("equipped_for_imaging", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_empty = up.model.Fluent("empty", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_have_rock_analysis = up.model.Fluent("have_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_have_soil_analysis = up.model.Fluent("have_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_full = up.model.Fluent("full", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_calibrated = up.model.Fluent("calibrated", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("r", type_rover)]))
        fluent_supports = up.model.Fluent("supports", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("m", type_mode)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_visible = up.model.Fluent("visible", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint), ("p", type_waypoint)]))
        fluent_have_image = up.model.Fluent("have_image", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("o", type_objective), ("m", type_mode)]))
        fluent_communicated_soil_data = up.model.Fluent("communicated_soil_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_rock_data = up.model.Fluent("communicated_rock_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_image_data = up.model.Fluent("communicated_image_data", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("m", type_mode)]))
        fluent_at_soil_sample = up.model.Fluent("at_soil_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_at_rock_sample = up.model.Fluent("at_rock_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_visible_from = up.model.Fluent("visible_from", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("w", type_waypoint)]))
        fluent_store_of = up.model.Fluent("store_of", tm.BoolType(), _signature=OrderedDict([("s", type_store), ("r", type_rover)]))
        fluent_calibration_target = up.model.Fluent("calibration_target", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("o", type_objective)]))
        fluent_on_board = up.model.Fluent("on_board", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("r", type_rover)]))
        fluent_channel_free = up.model.Fluent("channel_free", tm.BoolType(), _signature=OrderedDict([("l", type_lander)]))
        fluent_in_sun = up.model.Fluent("in_sun", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_energy = up.model.Fluent("energy", tm.RealType(None, None), _signature=OrderedDict([("r", type_rover)]))
        fluent_recharges = up.model.Fluent("recharges", tm.RealType(None, None), _signature=OrderedDict([]))
        object_general = up.model.Object("general", type_lander)
        object_colour = up.model.Object("colour", type_mode)
        object_high_res = up.model.Object("high_res", type_mode)
        object_low_res = up.model.Object("low_res", type_mode)
        object_rover0 = up.model.Object("rover0", type_rover)
        object_rover1 = up.model.Object("rover1", type_rover)
        object_rover0store = up.model.Object("rover0store", type_store)
        object_rover1store = up.model.Object("rover1store", type_store)
        object_waypoint0 = up.model.Object("waypoint0", type_waypoint)
        object_waypoint1 = up.model.Object("waypoint1", type_waypoint)
        object_waypoint2 = up.model.Object("waypoint2", type_waypoint)
        object_waypoint3 = up.model.Object("waypoint3", type_waypoint)
        object_camera0 = up.model.Object("camera0", type_camera)
        object_camera1 = up.model.Object("camera1", type_camera)
        object_objective0 = up.model.Object("objective0", type_objective)
        object_objective1 = up.model.Object("objective1", type_objective)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("roverprob3726", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_general)
        problem.add_object(object_colour)
        problem.add_object(object_high_res)
        problem.add_object(object_low_res)
        problem.add_object(object_rover0)
        problem.add_object(object_rover1)
        problem.add_object(object_rover0store)
        problem.add_object(object_rover1store)
        problem.add_object(object_waypoint0)
        problem.add_object(object_waypoint1)
        problem.add_object(object_waypoint2)
        problem.add_object(object_waypoint3)
        problem.add_object(object_camera0)
        problem.add_object(object_camera1)
        problem.add_object(object_objective0)
        problem.add_object(object_objective1)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_lander, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_can_traverse, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_imaging, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_empty, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_full, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibrated, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_supports, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_image, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_soil_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_rock_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_image_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_soil_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_rock_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible_from, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_store_of, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibration_target, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_board, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_channel_free, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in_sun, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_energy)
        problem.add_fluent(fluent_recharges)
        act_navigate = up.model.InstantaneousAction("navigate", _parameters=OrderedDict([("x", type_rover), ("y", type_waypoint), ("z", type_waypoint)]))
        act_navigate.add_precondition(emgr.And(fluent_can_traverse(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), emgr.LE(emgr.Int(8), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))))))
        act_navigate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(8), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_navigate)
        act_recharge = up.model.InstantaneousAction("recharge", _parameters=OrderedDict([("x", type_rover), ("w", type_waypoint)]))
        act_recharge.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_in_sun(emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), emgr.LE(fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), emgr.Int(80))))
        act_recharge.add_increase_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(20), condition=emgr.TRUE())
        act_recharge.add_increase_effect(fluent=emgr.FluentExp(fluent_recharges), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_recharge)
        act_sample_soil = up.model.InstantaneousAction("sample_soil", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_soil.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(3), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_soil.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(3), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_soil)
        act_sample_rock = up.model.InstantaneousAction("sample_rock", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_rock.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(5), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_rock.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(5), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_rock)
        act_drop = up.model.InstantaneousAction("drop", _parameters=OrderedDict([("x", type_rover), ("y", type_store)]))
        act_drop.add_precondition(emgr.And(fluent_store_of(emgr.ParameterExp(up.model.Parameter("y", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store)))))
        act_drop.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drop)
        act_calibrate = up.model.InstantaneousAction("calibrate", _parameters=OrderedDict([("r", type_rover), ("i", type_camera), ("t", type_objective), ("w", type_waypoint)]))
        act_calibrate.add_precondition(emgr.And(fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), emgr.LE(emgr.Int(2), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_calibration_target(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("t", type_objective))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("t", type_objective)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover)))))
        act_calibrate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(2), condition=emgr.TRUE())
        act_calibrate.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_calibrate)
        act_take_image = up.model.InstantaneousAction("take_image", _parameters=OrderedDict([("r", type_rover), ("p", type_waypoint), ("o", type_objective), ("i", type_camera), ("m", type_mode)]))
        act_take_image.add_precondition(emgr.And(fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_supports(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(1), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_take_image.add_effect(fluent=fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_take_image.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_take_image.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_take_image)
        act_communicate_soil_data = up.model.InstantaneousAction("communicate_soil_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_soil_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_soil_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_communicated_soil_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_soil_data)
        act_communicate_rock_data = up.model.InstantaneousAction("communicate_rock_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_rock_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander)))))
        act_communicate_rock_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_communicated_rock_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_rock_data)
        act_communicate_image_data = up.model.InstantaneousAction("communicate_image_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("o", type_objective), ("m", type_mode), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_image_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(6), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_image_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_communicated_image_data(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(6), condition=emgr.TRUE())
        problem.add_action(act_communicate_image_data)
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(emgr.FluentExp(fluent_recharges), emgr.Int(0))
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_at_soil_sample(emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_at_lander(emgr.ObjectExp(object_general), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_channel_free(emgr.ObjectExp(object_general)), emgr.TRUE())
        problem.set_initial_value(fluent_energy(emgr.ObjectExp(object_rover0)), emgr.Int(50))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_store_of(emgr.ObjectExp(object_rover0store), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_empty(emgr.ObjectExp(object_rover0store)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_soil_analysis(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_rock_analysis(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_imaging(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_energy(emgr.ObjectExp(object_rover1)), emgr.Int(50))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_store_of(emgr.ObjectExp(object_rover1store), emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_empty(emgr.ObjectExp(object_rover1store)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_soil_analysis(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_rock_analysis(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_imaging(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_objective1)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_low_res)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_objective0)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_colour)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_low_res)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_communicated_soil_data(emgr.ObjectExp(object_waypoint2)), fluent_communicated_rock_data(emgr.ObjectExp(object_waypoint0)), fluent_communicated_image_data(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_colour))))                   
        return problem

    def get_description(self):
        return 'rovers'

    def version(self):
        return 1

class rovers_pfile2(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
 
        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_rover = tm.UserType("rover")
        type_waypoint = tm.UserType("waypoint")
        type_lander = tm.UserType("lander")
        type_store = tm.UserType("store")
        type_camera = tm.UserType("camera")
        type_mode = tm.UserType("mode")
        type_objective = tm.UserType("objective")
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_rover), ("y", type_waypoint)]))
        fluent_at_lander = up.model.Fluent("at_lander", tm.BoolType(), _signature=OrderedDict([("x", type_lander), ("y", type_waypoint)]))
        fluent_can_traverse = up.model.Fluent("can_traverse", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("x", type_waypoint), ("y", type_waypoint)]))
        fluent_equipped_for_soil_analysis = up.model.Fluent("equipped_for_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_rock_analysis = up.model.Fluent("equipped_for_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_imaging = up.model.Fluent("equipped_for_imaging", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_empty = up.model.Fluent("empty", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_have_rock_analysis = up.model.Fluent("have_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_have_soil_analysis = up.model.Fluent("have_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_full = up.model.Fluent("full", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_calibrated = up.model.Fluent("calibrated", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("r", type_rover)]))
        fluent_supports = up.model.Fluent("supports", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("m", type_mode)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_visible = up.model.Fluent("visible", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint), ("p", type_waypoint)]))
        fluent_have_image = up.model.Fluent("have_image", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("o", type_objective), ("m", type_mode)]))
        fluent_communicated_soil_data = up.model.Fluent("communicated_soil_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_rock_data = up.model.Fluent("communicated_rock_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_image_data = up.model.Fluent("communicated_image_data", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("m", type_mode)]))
        fluent_at_soil_sample = up.model.Fluent("at_soil_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_at_rock_sample = up.model.Fluent("at_rock_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_visible_from = up.model.Fluent("visible_from", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("w", type_waypoint)]))
        fluent_store_of = up.model.Fluent("store_of", tm.BoolType(), _signature=OrderedDict([("s", type_store), ("r", type_rover)]))
        fluent_calibration_target = up.model.Fluent("calibration_target", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("o", type_objective)]))
        fluent_on_board = up.model.Fluent("on_board", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("r", type_rover)]))
        fluent_channel_free = up.model.Fluent("channel_free", tm.BoolType(), _signature=OrderedDict([("l", type_lander)]))
        fluent_in_sun = up.model.Fluent("in_sun", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_energy = up.model.Fluent("energy", tm.RealType(None, None), _signature=OrderedDict([("r", type_rover)]))
        fluent_recharges = up.model.Fluent("recharges", tm.RealType(None, None), _signature=OrderedDict([]))
        object_general = up.model.Object("general", type_lander)
        object_colour = up.model.Object("colour", type_mode)
        object_high_res = up.model.Object("high_res", type_mode)
        object_low_res = up.model.Object("low_res", type_mode)
        object_rover0 = up.model.Object("rover0", type_rover)
        object_rover0store = up.model.Object("rover0store", type_store)
        object_waypoint0 = up.model.Object("waypoint0", type_waypoint)
        object_waypoint1 = up.model.Object("waypoint1", type_waypoint)
        object_waypoint2 = up.model.Object("waypoint2", type_waypoint)
        object_waypoint3 = up.model.Object("waypoint3", type_waypoint)
        object_camera0 = up.model.Object("camera0", type_camera)
        object_camera1 = up.model.Object("camera1", type_camera)
        object_objective0 = up.model.Object("objective0", type_objective)
        object_objective1 = up.model.Object("objective1", type_objective)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("roverprob4213", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_general)
        problem.add_object(object_colour)
        problem.add_object(object_high_res)
        problem.add_object(object_low_res)
        problem.add_object(object_rover0)
        problem.add_object(object_rover0store)
        problem.add_object(object_waypoint0)
        problem.add_object(object_waypoint1)
        problem.add_object(object_waypoint2)
        problem.add_object(object_waypoint3)
        problem.add_object(object_camera0)
        problem.add_object(object_camera1)
        problem.add_object(object_objective0)
        problem.add_object(object_objective1)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_lander, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_can_traverse, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_imaging, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_empty, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_full, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibrated, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_supports, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_image, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_soil_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_rock_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_image_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_soil_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_rock_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible_from, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_store_of, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibration_target, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_board, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_channel_free, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in_sun, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_energy)
        problem.add_fluent(fluent_recharges)
        act_navigate = up.model.InstantaneousAction("navigate", _parameters=OrderedDict([("x", type_rover), ("y", type_waypoint), ("z", type_waypoint)]))
        act_navigate.add_precondition(emgr.And(fluent_can_traverse(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), emgr.LE(emgr.Int(8), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))))))
        act_navigate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(8), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_navigate)
        act_recharge = up.model.InstantaneousAction("recharge", _parameters=OrderedDict([("x", type_rover), ("w", type_waypoint)]))
        act_recharge.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_in_sun(emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), emgr.LE(fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), emgr.Int(80))))
        act_recharge.add_increase_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(20), condition=emgr.TRUE())
        act_recharge.add_increase_effect(fluent=emgr.FluentExp(fluent_recharges), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_recharge)
        act_sample_soil = up.model.InstantaneousAction("sample_soil", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_soil.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(3), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_soil.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(3), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_soil)
        act_sample_rock = up.model.InstantaneousAction("sample_rock", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_rock.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(5), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_rock.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(5), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_rock)
        act_drop = up.model.InstantaneousAction("drop", _parameters=OrderedDict([("x", type_rover), ("y", type_store)]))
        act_drop.add_precondition(emgr.And(fluent_store_of(emgr.ParameterExp(up.model.Parameter("y", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store)))))
        act_drop.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drop)
        act_calibrate = up.model.InstantaneousAction("calibrate", _parameters=OrderedDict([("r", type_rover), ("i", type_camera), ("t", type_objective), ("w", type_waypoint)]))
        act_calibrate.add_precondition(emgr.And(fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), emgr.LE(emgr.Int(2), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_calibration_target(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("t", type_objective))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("t", type_objective)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover)))))
        act_calibrate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(2), condition=emgr.TRUE())
        act_calibrate.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_calibrate)
        act_take_image = up.model.InstantaneousAction("take_image", _parameters=OrderedDict([("r", type_rover), ("p", type_waypoint), ("o", type_objective), ("i", type_camera), ("m", type_mode)]))
        act_take_image.add_precondition(emgr.And(fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_supports(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(1), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_take_image.add_effect(fluent=fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_take_image.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_take_image.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_take_image)
        act_communicate_soil_data = up.model.InstantaneousAction("communicate_soil_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_soil_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_soil_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_communicated_soil_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_soil_data)
        act_communicate_rock_data = up.model.InstantaneousAction("communicate_rock_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_rock_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander)))))
        act_communicate_rock_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_communicated_rock_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_rock_data)
        act_communicate_image_data = up.model.InstantaneousAction("communicate_image_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("o", type_objective), ("m", type_mode), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_image_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(6), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_image_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_communicated_image_data(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(6), condition=emgr.TRUE())
        problem.add_action(act_communicate_image_data)
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(emgr.FluentExp(fluent_recharges), emgr.Int(0))
        problem.set_initial_value(fluent_at_soil_sample(emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_at_lander(emgr.ObjectExp(object_general), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_channel_free(emgr.ObjectExp(object_general)), emgr.TRUE())
        problem.set_initial_value(fluent_energy(emgr.ObjectExp(object_rover0)), emgr.Int(50))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_store_of(emgr.ObjectExp(object_rover0store), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_empty(emgr.ObjectExp(object_rover0store)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_soil_analysis(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_rock_analysis(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_imaging(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_objective0)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_colour)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_low_res)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_objective1)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_communicated_soil_data(emgr.ObjectExp(object_waypoint0)), fluent_communicated_rock_data(emgr.ObjectExp(object_waypoint0)), fluent_communicated_image_data(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_low_res))))
        return problem

    def get_description(self):
        return 'rovers'

    def version(self):
        return 1        


class rovers_pfile4(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):

        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_rover = tm.UserType("rover")
        type_waypoint = tm.UserType("waypoint")
        type_lander = tm.UserType("lander")
        type_store = tm.UserType("store")
        type_camera = tm.UserType("camera")
        type_mode = tm.UserType("mode")
        type_objective = tm.UserType("objective")
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_rover), ("y", type_waypoint)]))
        fluent_at_lander = up.model.Fluent("at_lander", tm.BoolType(), _signature=OrderedDict([("x", type_lander), ("y", type_waypoint)]))
        fluent_can_traverse = up.model.Fluent("can_traverse", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("x", type_waypoint), ("y", type_waypoint)]))
        fluent_equipped_for_soil_analysis = up.model.Fluent("equipped_for_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_rock_analysis = up.model.Fluent("equipped_for_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_imaging = up.model.Fluent("equipped_for_imaging", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_empty = up.model.Fluent("empty", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_have_rock_analysis = up.model.Fluent("have_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_have_soil_analysis = up.model.Fluent("have_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_full = up.model.Fluent("full", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_calibrated = up.model.Fluent("calibrated", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("r", type_rover)]))
        fluent_supports = up.model.Fluent("supports", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("m", type_mode)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_visible = up.model.Fluent("visible", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint), ("p", type_waypoint)]))
        fluent_have_image = up.model.Fluent("have_image", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("o", type_objective), ("m", type_mode)]))
        fluent_communicated_soil_data = up.model.Fluent("communicated_soil_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_rock_data = up.model.Fluent("communicated_rock_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_image_data = up.model.Fluent("communicated_image_data", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("m", type_mode)]))
        fluent_at_soil_sample = up.model.Fluent("at_soil_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_at_rock_sample = up.model.Fluent("at_rock_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_visible_from = up.model.Fluent("visible_from", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("w", type_waypoint)]))
        fluent_store_of = up.model.Fluent("store_of", tm.BoolType(), _signature=OrderedDict([("s", type_store), ("r", type_rover)]))
        fluent_calibration_target = up.model.Fluent("calibration_target", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("o", type_objective)]))
        fluent_on_board = up.model.Fluent("on_board", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("r", type_rover)]))
        fluent_channel_free = up.model.Fluent("channel_free", tm.BoolType(), _signature=OrderedDict([("l", type_lander)]))
        fluent_in_sun = up.model.Fluent("in_sun", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_energy = up.model.Fluent("energy", tm.RealType(None, None), _signature=OrderedDict([("r", type_rover)]))
        fluent_recharges = up.model.Fluent("recharges", tm.RealType(None, None), _signature=OrderedDict([]))
        object_general = up.model.Object("general", type_lander)
        object_colour = up.model.Object("colour", type_mode)
        object_high_res = up.model.Object("high_res", type_mode)
        object_low_res = up.model.Object("low_res", type_mode)
        object_rover0 = up.model.Object("rover0", type_rover)
        object_rover1 = up.model.Object("rover1", type_rover)
        object_rover0store = up.model.Object("rover0store", type_store)
        object_rover1store = up.model.Object("rover1store", type_store)
        object_waypoint0 = up.model.Object("waypoint0", type_waypoint)
        object_waypoint1 = up.model.Object("waypoint1", type_waypoint)
        object_waypoint2 = up.model.Object("waypoint2", type_waypoint)
        object_waypoint3 = up.model.Object("waypoint3", type_waypoint)
        object_camera0 = up.model.Object("camera0", type_camera)
        object_camera1 = up.model.Object("camera1", type_camera)
        object_camera2 = up.model.Object("camera2", type_camera)
        object_objective0 = up.model.Object("objective0", type_objective)
        object_objective1 = up.model.Object("objective1", type_objective)
        object_objective2 = up.model.Object("objective2", type_objective)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("roverprob6232", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_general)
        problem.add_object(object_colour)
        problem.add_object(object_high_res)
        problem.add_object(object_low_res)
        problem.add_object(object_rover0)
        problem.add_object(object_rover1)
        problem.add_object(object_rover0store)
        problem.add_object(object_rover1store)
        problem.add_object(object_waypoint0)
        problem.add_object(object_waypoint1)
        problem.add_object(object_waypoint2)
        problem.add_object(object_waypoint3)
        problem.add_object(object_camera0)
        problem.add_object(object_camera1)
        problem.add_object(object_camera2)
        problem.add_object(object_objective0)
        problem.add_object(object_objective1)
        problem.add_object(object_objective2)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_lander, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_can_traverse, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_imaging, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_empty, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_full, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibrated, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_supports, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_image, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_soil_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_rock_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_image_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_soil_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_rock_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible_from, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_store_of, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibration_target, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_board, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_channel_free, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in_sun, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_energy)
        problem.add_fluent(fluent_recharges)
        act_navigate = up.model.InstantaneousAction("navigate", _parameters=OrderedDict([("x", type_rover), ("y", type_waypoint), ("z", type_waypoint)]))
        act_navigate.add_precondition(emgr.And(fluent_can_traverse(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), emgr.LE(emgr.Int(8), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))))))
        act_navigate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(8), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_navigate)
        act_recharge = up.model.InstantaneousAction("recharge", _parameters=OrderedDict([("x", type_rover), ("w", type_waypoint)]))
        act_recharge.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_in_sun(emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), emgr.LE(fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), emgr.Int(80))))
        act_recharge.add_increase_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(20), condition=emgr.TRUE())
        act_recharge.add_increase_effect(fluent=emgr.FluentExp(fluent_recharges), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_recharge)
        act_sample_soil = up.model.InstantaneousAction("sample_soil", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_soil.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(3), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_soil.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(3), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_soil)
        act_sample_rock = up.model.InstantaneousAction("sample_rock", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_rock.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(5), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_rock.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(5), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_rock)
        act_drop = up.model.InstantaneousAction("drop", _parameters=OrderedDict([("x", type_rover), ("y", type_store)]))
        act_drop.add_precondition(emgr.And(fluent_store_of(emgr.ParameterExp(up.model.Parameter("y", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store)))))
        act_drop.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drop)
        act_calibrate = up.model.InstantaneousAction("calibrate", _parameters=OrderedDict([("r", type_rover), ("i", type_camera), ("t", type_objective), ("w", type_waypoint)]))
        act_calibrate.add_precondition(emgr.And(fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), emgr.LE(emgr.Int(2), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_calibration_target(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("t", type_objective))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("t", type_objective)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover)))))
        act_calibrate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(2), condition=emgr.TRUE())
        act_calibrate.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_calibrate)
        act_take_image = up.model.InstantaneousAction("take_image", _parameters=OrderedDict([("r", type_rover), ("p", type_waypoint), ("o", type_objective), ("i", type_camera), ("m", type_mode)]))
        act_take_image.add_precondition(emgr.And(fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_supports(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(1), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_take_image.add_effect(fluent=fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_take_image.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_take_image.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_take_image)
        act_communicate_soil_data = up.model.InstantaneousAction("communicate_soil_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_soil_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_soil_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_communicated_soil_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_soil_data)
        act_communicate_rock_data = up.model.InstantaneousAction("communicate_rock_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_rock_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander)))))
        act_communicate_rock_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_communicated_rock_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_rock_data)
        act_communicate_image_data = up.model.InstantaneousAction("communicate_image_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("o", type_objective), ("m", type_mode), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_image_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(6), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_image_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_communicated_image_data(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(6), condition=emgr.TRUE())
        problem.add_action(act_communicate_image_data)
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(emgr.FluentExp(fluent_recharges), emgr.Int(0))
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_at_soil_sample(emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_at_soil_sample(emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_at_lander(emgr.ObjectExp(object_general), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_channel_free(emgr.ObjectExp(object_general)), emgr.TRUE())
        problem.set_initial_value(fluent_energy(emgr.ObjectExp(object_rover0)), emgr.Int(50))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_store_of(emgr.ObjectExp(object_rover0store), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_empty(emgr.ObjectExp(object_rover0store)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_soil_analysis(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_imaging(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_energy(emgr.ObjectExp(object_rover1)), emgr.Int(50))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_store_of(emgr.ObjectExp(object_rover1store), emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_empty(emgr.ObjectExp(object_rover1store)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_soil_analysis(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_rock_analysis(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_imaging(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_objective0)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_colour)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_objective0)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_colour)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_low_res)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera2), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera2), emgr.ObjectExp(object_objective1)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera2), emgr.ObjectExp(object_low_res)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective2), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective2), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_communicated_soil_data(emgr.ObjectExp(object_waypoint3)), fluent_communicated_rock_data(emgr.ObjectExp(object_waypoint1)), fluent_communicated_image_data(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_high_res))))                 
        return problem

    def get_description(self):
        return 'rovers'

    def version(self):
        return 1

#medium problems

class rovers_pfile5(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
     
        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_rover = tm.UserType("rover")
        type_waypoint = tm.UserType("waypoint")
        type_lander = tm.UserType("lander")
        type_store = tm.UserType("store")
        type_camera = tm.UserType("camera")
        type_mode = tm.UserType("mode")
        type_objective = tm.UserType("objective")
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_rover), ("y", type_waypoint)]))
        fluent_at_lander = up.model.Fluent("at_lander", tm.BoolType(), _signature=OrderedDict([("x", type_lander), ("y", type_waypoint)]))
        fluent_can_traverse = up.model.Fluent("can_traverse", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("x", type_waypoint), ("y", type_waypoint)]))
        fluent_equipped_for_soil_analysis = up.model.Fluent("equipped_for_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_rock_analysis = up.model.Fluent("equipped_for_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_imaging = up.model.Fluent("equipped_for_imaging", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_empty = up.model.Fluent("empty", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_have_rock_analysis = up.model.Fluent("have_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_have_soil_analysis = up.model.Fluent("have_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_full = up.model.Fluent("full", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_calibrated = up.model.Fluent("calibrated", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("r", type_rover)]))
        fluent_supports = up.model.Fluent("supports", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("m", type_mode)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_visible = up.model.Fluent("visible", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint), ("p", type_waypoint)]))
        fluent_have_image = up.model.Fluent("have_image", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("o", type_objective), ("m", type_mode)]))
        fluent_communicated_soil_data = up.model.Fluent("communicated_soil_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_rock_data = up.model.Fluent("communicated_rock_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_image_data = up.model.Fluent("communicated_image_data", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("m", type_mode)]))
        fluent_at_soil_sample = up.model.Fluent("at_soil_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_at_rock_sample = up.model.Fluent("at_rock_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_visible_from = up.model.Fluent("visible_from", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("w", type_waypoint)]))
        fluent_store_of = up.model.Fluent("store_of", tm.BoolType(), _signature=OrderedDict([("s", type_store), ("r", type_rover)]))
        fluent_calibration_target = up.model.Fluent("calibration_target", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("o", type_objective)]))
        fluent_on_board = up.model.Fluent("on_board", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("r", type_rover)]))
        fluent_channel_free = up.model.Fluent("channel_free", tm.BoolType(), _signature=OrderedDict([("l", type_lander)]))
        fluent_in_sun = up.model.Fluent("in_sun", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_energy = up.model.Fluent("energy", tm.RealType(None, None), _signature=OrderedDict([("r", type_rover)]))
        fluent_recharges = up.model.Fluent("recharges", tm.RealType(None, None), _signature=OrderedDict([]))
        object_general = up.model.Object("general", type_lander)
        object_colour = up.model.Object("colour", type_mode)
        object_high_res = up.model.Object("high_res", type_mode)
        object_low_res = up.model.Object("low_res", type_mode)
        object_rover0 = up.model.Object("rover0", type_rover)
        object_rover1 = up.model.Object("rover1", type_rover)
        object_rover0store = up.model.Object("rover0store", type_store)
        object_rover1store = up.model.Object("rover1store", type_store)
        object_waypoint0 = up.model.Object("waypoint0", type_waypoint)
        object_waypoint1 = up.model.Object("waypoint1", type_waypoint)
        object_waypoint2 = up.model.Object("waypoint2", type_waypoint)
        object_waypoint3 = up.model.Object("waypoint3", type_waypoint)
        object_camera0 = up.model.Object("camera0", type_camera)
        object_camera1 = up.model.Object("camera1", type_camera)
        object_camera2 = up.model.Object("camera2", type_camera)
        object_objective0 = up.model.Object("objective0", type_objective)
        object_objective1 = up.model.Object("objective1", type_objective)
        object_objective2 = up.model.Object("objective2", type_objective)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("roverprob2435", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_general)
        problem.add_object(object_colour)
        problem.add_object(object_high_res)
        problem.add_object(object_low_res)
        problem.add_object(object_rover0)
        problem.add_object(object_rover1)
        problem.add_object(object_rover0store)
        problem.add_object(object_rover1store)
        problem.add_object(object_waypoint0)
        problem.add_object(object_waypoint1)
        problem.add_object(object_waypoint2)
        problem.add_object(object_waypoint3)
        problem.add_object(object_camera0)
        problem.add_object(object_camera1)
        problem.add_object(object_camera2)
        problem.add_object(object_objective0)
        problem.add_object(object_objective1)
        problem.add_object(object_objective2)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_lander, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_can_traverse, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_imaging, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_empty, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_full, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibrated, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_supports, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_image, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_soil_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_rock_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_image_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_soil_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_rock_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible_from, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_store_of, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibration_target, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_board, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_channel_free, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in_sun, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_energy)
        problem.add_fluent(fluent_recharges)
        act_navigate = up.model.InstantaneousAction("navigate", _parameters=OrderedDict([("x", type_rover), ("y", type_waypoint), ("z", type_waypoint)]))
        act_navigate.add_precondition(emgr.And(fluent_can_traverse(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), emgr.LE(emgr.Int(8), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))))))
        act_navigate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(8), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_navigate)
        act_recharge = up.model.InstantaneousAction("recharge", _parameters=OrderedDict([("x", type_rover), ("w", type_waypoint)]))
        act_recharge.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_in_sun(emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), emgr.LE(fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), emgr.Int(80))))
        act_recharge.add_increase_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(20), condition=emgr.TRUE())
        act_recharge.add_increase_effect(fluent=emgr.FluentExp(fluent_recharges), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_recharge)
        act_sample_soil = up.model.InstantaneousAction("sample_soil", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_soil.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(3), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_soil.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(3), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_soil)
        act_sample_rock = up.model.InstantaneousAction("sample_rock", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_rock.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(5), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_rock.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(5), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_rock)
        act_drop = up.model.InstantaneousAction("drop", _parameters=OrderedDict([("x", type_rover), ("y", type_store)]))
        act_drop.add_precondition(emgr.And(fluent_store_of(emgr.ParameterExp(up.model.Parameter("y", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store)))))
        act_drop.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drop)
        act_calibrate = up.model.InstantaneousAction("calibrate", _parameters=OrderedDict([("r", type_rover), ("i", type_camera), ("t", type_objective), ("w", type_waypoint)]))
        act_calibrate.add_precondition(emgr.And(fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), emgr.LE(emgr.Int(2), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_calibration_target(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("t", type_objective))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("t", type_objective)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover)))))
        act_calibrate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(2), condition=emgr.TRUE())
        act_calibrate.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_calibrate)
        act_take_image = up.model.InstantaneousAction("take_image", _parameters=OrderedDict([("r", type_rover), ("p", type_waypoint), ("o", type_objective), ("i", type_camera), ("m", type_mode)]))
        act_take_image.add_precondition(emgr.And(fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_supports(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(1), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_take_image.add_effect(fluent=fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_take_image.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_take_image.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_take_image)
        act_communicate_soil_data = up.model.InstantaneousAction("communicate_soil_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_soil_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_soil_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_communicated_soil_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_soil_data)
        act_communicate_rock_data = up.model.InstantaneousAction("communicate_rock_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_rock_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander)))))
        act_communicate_rock_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_communicated_rock_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_rock_data)
        act_communicate_image_data = up.model.InstantaneousAction("communicate_image_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("o", type_objective), ("m", type_mode), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_image_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(6), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_image_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_communicated_image_data(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(6), condition=emgr.TRUE())
        problem.add_action(act_communicate_image_data)
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(emgr.FluentExp(fluent_recharges), emgr.Int(0))
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_at_soil_sample(emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_at_soil_sample(emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_at_soil_sample(emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_at_lander(emgr.ObjectExp(object_general), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_channel_free(emgr.ObjectExp(object_general)), emgr.TRUE())
        problem.set_initial_value(fluent_energy(emgr.ObjectExp(object_rover0)), emgr.Int(50))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_store_of(emgr.ObjectExp(object_rover0store), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_empty(emgr.ObjectExp(object_rover0store)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_rock_analysis(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_imaging(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_energy(emgr.ObjectExp(object_rover1)), emgr.Int(50))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_store_of(emgr.ObjectExp(object_rover1store), emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_empty(emgr.ObjectExp(object_rover1store)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_soil_analysis(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_imaging(emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover1), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_objective1)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_low_res)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_rover1)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_objective1)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_colour)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera2), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera2), emgr.ObjectExp(object_objective1)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera2), emgr.ObjectExp(object_colour)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera2), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera2), emgr.ObjectExp(object_low_res)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective2), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective2), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_communicated_soil_data(emgr.ObjectExp(object_waypoint1)), fluent_communicated_soil_data(emgr.ObjectExp(object_waypoint2)), fluent_communicated_rock_data(emgr.ObjectExp(object_waypoint0)), fluent_communicated_rock_data(emgr.ObjectExp(object_waypoint1)), fluent_communicated_image_data(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_high_res)), fluent_communicated_image_data(emgr.ObjectExp(object_objective2), emgr.ObjectExp(object_high_res)), fluent_communicated_image_data(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_colour))))                
        return problem

    def get_description(self):
        return 'rovers'

    def version(self):
        return 1 


class rovers_pfile2_FV(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):
 
        env = up.environment.get_environment()
        emgr = env.expression_manager
        tm = env.type_manager
        type_rover = tm.UserType("rover")
        type_waypoint = tm.UserType("waypoint")
        type_lander = tm.UserType("lander")
        type_store = tm.UserType("store")
        type_camera = tm.UserType("camera")
        type_mode = tm.UserType("mode")
        type_objective = tm.UserType("objective")
        fluent_at = up.model.Fluent("at", tm.BoolType(), _signature=OrderedDict([("x", type_rover), ("y", type_waypoint)]))
        fluent_at_lander = up.model.Fluent("at_lander", tm.BoolType(), _signature=OrderedDict([("x", type_lander), ("y", type_waypoint)]))
        fluent_can_traverse = up.model.Fluent("can_traverse", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("x", type_waypoint), ("y", type_waypoint)]))
        fluent_equipped_for_soil_analysis = up.model.Fluent("equipped_for_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_rock_analysis = up.model.Fluent("equipped_for_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_equipped_for_imaging = up.model.Fluent("equipped_for_imaging", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_empty = up.model.Fluent("empty", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_have_rock_analysis = up.model.Fluent("have_rock_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_have_soil_analysis = up.model.Fluent("have_soil_analysis", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("w", type_waypoint)]))
        fluent_full = up.model.Fluent("full", tm.BoolType(), _signature=OrderedDict([("s", type_store)]))
        fluent_calibrated = up.model.Fluent("calibrated", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("r", type_rover)]))
        fluent_supports = up.model.Fluent("supports", tm.BoolType(), _signature=OrderedDict([("c", type_camera), ("m", type_mode)]))
        fluent_available = up.model.Fluent("available", tm.BoolType(), _signature=OrderedDict([("r", type_rover)]))
        fluent_visible = up.model.Fluent("visible", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint), ("p", type_waypoint)]))
        fluent_have_image = up.model.Fluent("have_image", tm.BoolType(), _signature=OrderedDict([("r", type_rover), ("o", type_objective), ("m", type_mode)]))
        fluent_communicated_soil_data = up.model.Fluent("communicated_soil_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_rock_data = up.model.Fluent("communicated_rock_data", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_communicated_image_data = up.model.Fluent("communicated_image_data", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("m", type_mode)]))
        fluent_at_soil_sample = up.model.Fluent("at_soil_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_at_rock_sample = up.model.Fluent("at_rock_sample", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_visible_from = up.model.Fluent("visible_from", tm.BoolType(), _signature=OrderedDict([("o", type_objective), ("w", type_waypoint)]))
        fluent_store_of = up.model.Fluent("store_of", tm.BoolType(), _signature=OrderedDict([("s", type_store), ("r", type_rover)]))
        fluent_calibration_target = up.model.Fluent("calibration_target", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("o", type_objective)]))
        fluent_on_board = up.model.Fluent("on_board", tm.BoolType(), _signature=OrderedDict([("i", type_camera), ("r", type_rover)]))
        fluent_channel_free = up.model.Fluent("channel_free", tm.BoolType(), _signature=OrderedDict([("l", type_lander)]))
        fluent_in_sun = up.model.Fluent("in_sun", tm.BoolType(), _signature=OrderedDict([("w", type_waypoint)]))
        fluent_energy = up.model.Fluent("energy", tm.RealType(None, None), _signature=OrderedDict([("r", type_rover)]))
        fluent_recharges = up.model.Fluent("recharges", tm.RealType(None, None), _signature=OrderedDict([]))
        object_general = up.model.Object("general", type_lander)
        object_colour = up.model.Object("colour", type_mode)
        object_high_res = up.model.Object("high_res", type_mode)
        object_low_res = up.model.Object("low_res", type_mode)
        object_rover0 = up.model.Object("rover0", type_rover)
        object_rover0store = up.model.Object("rover0store", type_store)
        object_waypoint0 = up.model.Object("waypoint0", type_waypoint)
        object_waypoint1 = up.model.Object("waypoint1", type_waypoint)
        object_waypoint2 = up.model.Object("waypoint2", type_waypoint)
        object_waypoint3 = up.model.Object("waypoint3", type_waypoint)
        object_camera0 = up.model.Object("camera0", type_camera)
        object_camera1 = up.model.Object("camera1", type_camera)
        object_objective0 = up.model.Object("objective0", type_objective)
        object_objective1 = up.model.Object("objective1", type_objective)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("roverprob4213", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_general)
        problem.add_object(object_colour)
        problem.add_object(object_high_res)
        problem.add_object(object_low_res)
        problem.add_object(object_rover0)
        problem.add_object(object_rover0store)
        problem.add_object(object_waypoint0)
        problem.add_object(object_waypoint1)
        problem.add_object(object_waypoint2)
        problem.add_object(object_waypoint3)
        problem.add_object(object_camera0)
        problem.add_object(object_camera1)
        problem.add_object(object_objective0)
        problem.add_object(object_objective1)
        problem.add_fluent(fluent_at, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_lander, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_can_traverse, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_equipped_for_imaging, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_empty, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_rock_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_soil_analysis, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_full, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibrated, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_supports, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_available, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_image, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_soil_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_rock_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_communicated_image_data, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_soil_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_at_rock_sample, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_visible_from, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_store_of, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibration_target, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_on_board, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_channel_free, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_in_sun, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_energy)
        problem.add_fluent(fluent_recharges)
        act_navigate = up.model.InstantaneousAction("navigate", _parameters=OrderedDict([("x", type_rover), ("y", type_waypoint), ("z", type_waypoint)]))
        act_navigate.add_precondition(emgr.And(fluent_can_traverse(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("y", type_waypoint)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), emgr.LE(emgr.Int(8), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))))))
        act_navigate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(8), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_navigate.add_effect(fluent=fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("z", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_navigate)
        act_recharge = up.model.InstantaneousAction("recharge", _parameters=OrderedDict([("x", type_rover), ("w", type_waypoint)]))
        act_recharge.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_in_sun(emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), emgr.LE(fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), emgr.Int(80))))
        act_recharge.add_increase_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(20), condition=emgr.TRUE())
        act_recharge.add_increase_effect(fluent=emgr.FluentExp(fluent_recharges), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_recharge)
        act_sample_soil = up.model.InstantaneousAction("sample_soil", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_soil.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(3), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_soil.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(3), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_soil.add_effect(fluent=fluent_at_soil_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_soil)
        act_sample_rock = up.model.InstantaneousAction("sample_rock", _parameters=OrderedDict([("x", type_rover), ("s", type_store), ("p", type_waypoint)]))
        act_sample_rock.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(5), fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover)))), fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_equipped_for_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_store_of(emgr.ParameterExp(up.model.Parameter("s", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store)))))
        act_sample_rock.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("s", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("x", type_rover))), value=emgr.Int(5), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("x", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_sample_rock.add_effect(fluent=fluent_at_rock_sample(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_sample_rock)
        act_drop = up.model.InstantaneousAction("drop", _parameters=OrderedDict([("x", type_rover), ("y", type_store)]))
        act_drop.add_precondition(emgr.And(fluent_store_of(emgr.ParameterExp(up.model.Parameter("y", type_store)), emgr.ParameterExp(up.model.Parameter("x", type_rover))), fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store)))))
        act_drop.add_effect(fluent=fluent_full(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_drop.add_effect(fluent=fluent_empty(emgr.ParameterExp(up.model.Parameter("y", type_store))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_drop)
        act_calibrate = up.model.InstantaneousAction("calibrate", _parameters=OrderedDict([("r", type_rover), ("i", type_camera), ("t", type_objective), ("w", type_waypoint)]))
        act_calibrate.add_precondition(emgr.And(fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), emgr.LE(emgr.Int(2), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_calibration_target(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("t", type_objective))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("t", type_objective)), emgr.ParameterExp(up.model.Parameter("w", type_waypoint))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover)))))
        act_calibrate.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(2), condition=emgr.TRUE())
        act_calibrate.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_calibrate)
        act_take_image = up.model.InstantaneousAction("take_image", _parameters=OrderedDict([("r", type_rover), ("p", type_waypoint), ("o", type_objective), ("i", type_camera), ("m", type_mode)]))
        act_take_image.add_precondition(emgr.And(fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_equipped_for_imaging(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_supports(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible_from(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(1), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_take_image.add_effect(fluent=fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_take_image.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_camera)), emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_take_image.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(1), condition=emgr.TRUE())
        problem.add_action(act_take_image)
        act_communicate_soil_data = up.model.InstantaneousAction("communicate_soil_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_soil_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_soil_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_soil_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_communicated_soil_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_soil_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_soil_data)
        act_communicate_rock_data = up.model.InstantaneousAction("communicate_rock_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("p", type_waypoint), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_rock_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_rock_analysis(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), emgr.LE(emgr.Int(4), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover)))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander)))))
        act_communicate_rock_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_communicated_rock_data(emgr.ParameterExp(up.model.Parameter("p", type_waypoint))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_rock_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(4), condition=emgr.TRUE())
        problem.add_action(act_communicate_rock_data)
        act_communicate_image_data = up.model.InstantaneousAction("communicate_image_data", _parameters=OrderedDict([("r", type_rover), ("l", type_lander), ("o", type_objective), ("m", type_mode), ("x", type_waypoint), ("y", type_waypoint)]))
        act_communicate_image_data.add_precondition(emgr.And(fluent_at(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("x", type_waypoint))), fluent_at_lander(emgr.ParameterExp(up.model.Parameter("l", type_lander)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_have_image(emgr.ParameterExp(up.model.Parameter("r", type_rover)), emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_visible(emgr.ParameterExp(up.model.Parameter("x", type_waypoint)), emgr.ParameterExp(up.model.Parameter("y", type_waypoint))), fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), emgr.LE(emgr.Int(6), fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))))))
        act_communicate_image_data.add_effect(fluent=fluent_channel_free(emgr.ParameterExp(up.model.Parameter("l", type_lander))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_communicated_image_data(emgr.ParameterExp(up.model.Parameter("o", type_objective)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_effect(fluent=fluent_available(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_communicate_image_data.add_decrease_effect(fluent=fluent_energy(emgr.ParameterExp(up.model.Parameter("r", type_rover))), value=emgr.Int(6), condition=emgr.TRUE())
        problem.add_action(act_communicate_image_data)
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible(emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(emgr.FluentExp(fluent_recharges), emgr.Int(0))
        problem.set_initial_value(fluent_at_soil_sample(emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_at_rock_sample(emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_in_sun(emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_at_lander(emgr.ObjectExp(object_general), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_channel_free(emgr.ObjectExp(object_general)), emgr.TRUE())
        problem.set_initial_value(fluent_energy(emgr.ObjectExp(object_rover0)), emgr.Int(50))
        problem.set_initial_value(fluent_at(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_available(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_store_of(emgr.ObjectExp(object_rover0store), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_empty(emgr.ObjectExp(object_rover0store)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_soil_analysis(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_rock_analysis(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_equipped_for_imaging(emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint2), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint0), emgr.ObjectExp(object_waypoint3)), emgr.TRUE())
        problem.set_initial_value(fluent_can_traverse(emgr.ObjectExp(object_rover0), emgr.ObjectExp(object_waypoint3), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_objective0)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_colour)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera0), emgr.ObjectExp(object_low_res)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_rover0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_objective1)), emgr.TRUE())
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_camera1), emgr.ObjectExp(object_high_res)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective0), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint0)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint1)), emgr.TRUE())
        problem.set_initial_value(fluent_visible_from(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_waypoint2)), emgr.TRUE())
        problem.add_goal(goal=emgr.And(fluent_communicated_soil_data(emgr.ObjectExp(object_waypoint0)), fluent_communicated_rock_data(emgr.ObjectExp(object_waypoint0)), fluent_communicated_image_data(emgr.ObjectExp(object_objective1), emgr.ObjectExp(object_low_res))))
        problem.add_quality_metric(up.model.metrics.MinimizeExpressionOnFinalState(emgr.FluentExp(fluent_recharges)))
        return problem

    def get_description(self):
        return 'rovers'

    def version(self):
        return 1          
