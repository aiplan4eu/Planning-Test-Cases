from fractions import Fraction
from collections import OrderedDict
import unified_planning as up
from unified_planning.shortcuts import *


from planning_tests.commons.problem import TestCaseProblem


class block_grouping_5_5_2_1(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):

		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_block = tm.UserType("block")
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_max_x = up.model.Fluent("max_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_x = up.model.Fluent("min_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_y = up.model.Fluent("max_y", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_y = up.model.Fluent("min_y", tm.RealType(None, None), _signature=OrderedDict([]))
		object_b1 = up.model.Object("b1", type_block)
		object_b2 = up.model.Object("b2", type_block)
		object_b3 = up.model.Object("b3", type_block)
		object_b4 = up.model.Object("b4", type_block)
		object_b5 = up.model.Object("b5", type_block)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_5_5_2_1", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_b1)
		problem.add_object(object_b2)
		problem.add_object(object_b3)
		problem.add_object(object_b4)
		problem.add_object(object_b5)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_max_x)
		problem.add_fluent(fluent_min_x)
		problem.add_fluent(fluent_max_y)
		problem.add_fluent(fluent_min_y)
		act_move_block_up = up.model.InstantaneousAction("move_block_up", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_y)))
		act_move_block_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_up)
		act_move_block_down = up.model.InstantaneousAction("move_block_down", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_y), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_down)
		act_move_block_right = up.model.InstantaneousAction("move_block_right", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_x)))
		act_move_block_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_right)
		act_move_block_left = up.model.InstantaneousAction("move_block_left", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_x), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_left)
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b3)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b3)), emgr.Int(3))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b4)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b4)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b2)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b2)), emgr.Int(2))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b1)), emgr.Int(5))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b1)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b5)), emgr.Int(5))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b5)), emgr.Int(5))
		problem.set_initial_value(emgr.FluentExp(fluent_max_x), emgr.Int(5))
		problem.set_initial_value(emgr.FluentExp(fluent_min_x), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_max_y), emgr.Int(5))
		problem.set_initial_value(emgr.FluentExp(fluent_min_y), emgr.Int(1))
		problem.add_goal(goal=emgr.And(emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b5)))))))
		return problem

	def get_description(self):
		return 'block grouping'

	def version(self):
		return 1

class block_grouping_5_5_2_2(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):
		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_block = tm.UserType("block")
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_max_x = up.model.Fluent("max_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_x = up.model.Fluent("min_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_y = up.model.Fluent("max_y", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_y = up.model.Fluent("min_y", tm.RealType(None, None), _signature=OrderedDict([]))
		object_b1 = up.model.Object("b1", type_block)
		object_b2 = up.model.Object("b2", type_block)
		object_b3 = up.model.Object("b3", type_block)
		object_b4 = up.model.Object("b4", type_block)
		object_b5 = up.model.Object("b5", type_block)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_5_5_2_2", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_b1)
		problem.add_object(object_b2)
		problem.add_object(object_b3)
		problem.add_object(object_b4)
		problem.add_object(object_b5)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_max_x)
		problem.add_fluent(fluent_min_x)
		problem.add_fluent(fluent_max_y)
		problem.add_fluent(fluent_min_y)
		act_move_block_up = up.model.InstantaneousAction("move_block_up", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_y)))
		act_move_block_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_up)
		act_move_block_down = up.model.InstantaneousAction("move_block_down", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_y), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_down)
		act_move_block_right = up.model.InstantaneousAction("move_block_right", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_x)))
		act_move_block_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_right)
		act_move_block_left = up.model.InstantaneousAction("move_block_left", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_x), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_left)
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b3)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b3)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b4)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b4)), emgr.Int(2))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b2)), emgr.Int(5))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b2)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b1)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b1)), emgr.Int(5))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b5)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b5)), emgr.Int(2))
		problem.set_initial_value(emgr.FluentExp(fluent_max_x), emgr.Int(5))
		problem.set_initial_value(emgr.FluentExp(fluent_min_x), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_max_y), emgr.Int(5))
		problem.set_initial_value(emgr.FluentExp(fluent_min_y), emgr.Int(1))
		problem.add_goal(goal=emgr.And(emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b5)))))

		return problem

	def get_description(self):
		return 'block grouping'

	def version(self):
		return 1

class block_grouping_5_5_2_3(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):
		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_block = tm.UserType("block")
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_max_x = up.model.Fluent("max_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_x = up.model.Fluent("min_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_y = up.model.Fluent("max_y", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_y = up.model.Fluent("min_y", tm.RealType(None, None), _signature=OrderedDict([]))
		object_b1 = up.model.Object("b1", type_block)
		object_b2 = up.model.Object("b2", type_block)
		object_b3 = up.model.Object("b3", type_block)
		object_b4 = up.model.Object("b4", type_block)
		object_b5 = up.model.Object("b5", type_block)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_5_5_2_3", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_b1)
		problem.add_object(object_b2)
		problem.add_object(object_b3)
		problem.add_object(object_b4)
		problem.add_object(object_b5)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_max_x)
		problem.add_fluent(fluent_min_x)
		problem.add_fluent(fluent_max_y)
		problem.add_fluent(fluent_min_y)
		act_move_block_up = up.model.InstantaneousAction("move_block_up", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_y)))
		act_move_block_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_up)
		act_move_block_down = up.model.InstantaneousAction("move_block_down", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_y), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_down)
		act_move_block_right = up.model.InstantaneousAction("move_block_right", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_x)))
		act_move_block_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_right)
		act_move_block_left = up.model.InstantaneousAction("move_block_left", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_x), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_left)
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b3)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b3)), emgr.Int(3))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b4)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b4)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b2)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b2)), emgr.Int(5))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b1)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b1)), emgr.Int(3))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b5)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b5)), emgr.Int(4))
		problem.set_initial_value(emgr.FluentExp(fluent_max_x), emgr.Int(5))
		problem.set_initial_value(emgr.FluentExp(fluent_min_x), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_max_y), emgr.Int(5))
		problem.set_initial_value(emgr.FluentExp(fluent_min_y), emgr.Int(1))
		problem.add_goal(goal=emgr.And(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b5)))))
				

		return problem

	def get_description(self):
		return 'block grouping'

	def version(self):
		return 1




class block_grouping_11_10_2_2(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):
		
		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_block = tm.UserType("block")
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_max_x = up.model.Fluent("max_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_x = up.model.Fluent("min_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_y = up.model.Fluent("max_y", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_y = up.model.Fluent("min_y", tm.RealType(None, None), _signature=OrderedDict([]))
		object_b1 = up.model.Object("b1", type_block)
		object_b2 = up.model.Object("b2", type_block)
		object_b3 = up.model.Object("b3", type_block)
		object_b4 = up.model.Object("b4", type_block)
		object_b5 = up.model.Object("b5", type_block)
		object_b6 = up.model.Object("b6", type_block)
		object_b7 = up.model.Object("b7", type_block)
		object_b8 = up.model.Object("b8", type_block)
		object_b9 = up.model.Object("b9", type_block)
		object_b10 = up.model.Object("b10", type_block)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_11_10_2_2", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_b1)
		problem.add_object(object_b2)
		problem.add_object(object_b3)
		problem.add_object(object_b4)
		problem.add_object(object_b5)
		problem.add_object(object_b6)
		problem.add_object(object_b7)
		problem.add_object(object_b8)
		problem.add_object(object_b9)
		problem.add_object(object_b10)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_max_x)
		problem.add_fluent(fluent_min_x)
		problem.add_fluent(fluent_max_y)
		problem.add_fluent(fluent_min_y)
		act_move_block_up = up.model.InstantaneousAction("move_block_up", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_y)))
		act_move_block_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_up)
		act_move_block_down = up.model.InstantaneousAction("move_block_down", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_y), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_down)
		act_move_block_right = up.model.InstantaneousAction("move_block_right", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_x)))
		act_move_block_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_right)
		act_move_block_left = up.model.InstantaneousAction("move_block_left", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_x), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_left)
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b9)), emgr.Int(7))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b9)), emgr.Int(9))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b5)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b5)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b4)), emgr.Int(9))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b4)), emgr.Int(9))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b2)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b2)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b1)), emgr.Int(9))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b1)), emgr.Int(10))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b10)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b10)), emgr.Int(10))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b8)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b8)), emgr.Int(6))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b3)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b3)), emgr.Int(9))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b6)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b6)), emgr.Int(11))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b7)), emgr.Int(10))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b7)), emgr.Int(2))
		problem.set_initial_value(emgr.FluentExp(fluent_max_x), emgr.Int(11))
		problem.set_initial_value(emgr.FluentExp(fluent_min_x), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_max_y), emgr.Int(11))
		problem.set_initial_value(emgr.FluentExp(fluent_min_y), emgr.Int(1))
		problem.add_goal(goal=emgr.And(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b10)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b10))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b7)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b7)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b7)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b7)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b8)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b8)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b9)))))))



		return problem

	def get_description(self):
		return 'block grouping'

	def version(self):
		return 1


#medium difficulty problems
class block_grouping_20_25_6_2(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):

		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_block = tm.UserType("block")
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_max_x = up.model.Fluent("max_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_x = up.model.Fluent("min_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_y = up.model.Fluent("max_y", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_y = up.model.Fluent("min_y", tm.RealType(None, None), _signature=OrderedDict([]))
		object_b1 = up.model.Object("b1", type_block)
		object_b2 = up.model.Object("b2", type_block)
		object_b3 = up.model.Object("b3", type_block)
		object_b4 = up.model.Object("b4", type_block)
		object_b5 = up.model.Object("b5", type_block)
		object_b6 = up.model.Object("b6", type_block)
		object_b7 = up.model.Object("b7", type_block)
		object_b8 = up.model.Object("b8", type_block)
		object_b9 = up.model.Object("b9", type_block)
		object_b10 = up.model.Object("b10", type_block)
		object_b11 = up.model.Object("b11", type_block)
		object_b12 = up.model.Object("b12", type_block)
		object_b13 = up.model.Object("b13", type_block)
		object_b14 = up.model.Object("b14", type_block)
		object_b15 = up.model.Object("b15", type_block)
		object_b16 = up.model.Object("b16", type_block)
		object_b17 = up.model.Object("b17", type_block)
		object_b18 = up.model.Object("b18", type_block)
		object_b19 = up.model.Object("b19", type_block)
		object_b20 = up.model.Object("b20", type_block)
		object_b21 = up.model.Object("b21", type_block)
		object_b22 = up.model.Object("b22", type_block)
		object_b23 = up.model.Object("b23", type_block)
		object_b24 = up.model.Object("b24", type_block)
		object_b25 = up.model.Object("b25", type_block)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_20_25_6_2", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_b1)
		problem.add_object(object_b2)
		problem.add_object(object_b3)
		problem.add_object(object_b4)
		problem.add_object(object_b5)
		problem.add_object(object_b6)
		problem.add_object(object_b7)
		problem.add_object(object_b8)
		problem.add_object(object_b9)
		problem.add_object(object_b10)
		problem.add_object(object_b11)
		problem.add_object(object_b12)
		problem.add_object(object_b13)
		problem.add_object(object_b14)
		problem.add_object(object_b15)
		problem.add_object(object_b16)
		problem.add_object(object_b17)
		problem.add_object(object_b18)
		problem.add_object(object_b19)
		problem.add_object(object_b20)
		problem.add_object(object_b21)
		problem.add_object(object_b22)
		problem.add_object(object_b23)
		problem.add_object(object_b24)
		problem.add_object(object_b25)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_max_x)
		problem.add_fluent(fluent_min_x)
		problem.add_fluent(fluent_max_y)
		problem.add_fluent(fluent_min_y)
		act_move_block_up = up.model.InstantaneousAction("move_block_up", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_y)))
		act_move_block_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_up)
		act_move_block_down = up.model.InstantaneousAction("move_block_down", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_y), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_down)
		act_move_block_right = up.model.InstantaneousAction("move_block_right", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_x)))
		act_move_block_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_right)
		act_move_block_left = up.model.InstantaneousAction("move_block_left", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_x), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_left)
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b5)), emgr.Int(17))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b5)), emgr.Int(10))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b4)), emgr.Int(6))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b4)), emgr.Int(18))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b8)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b8)), emgr.Int(13))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b16)), emgr.Int(7))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b16)), emgr.Int(9))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b15)), emgr.Int(6))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b15)), emgr.Int(18))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b10)), emgr.Int(6))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b10)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b1)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b1)), emgr.Int(19))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b21)), emgr.Int(7))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b21)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b18)), emgr.Int(19))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b18)), emgr.Int(8))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b3)), emgr.Int(15))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b3)), emgr.Int(7))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b6)), emgr.Int(14))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b6)), emgr.Int(19))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b19)), emgr.Int(16))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b19)), emgr.Int(11))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b25)), emgr.Int(5))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b25)), emgr.Int(2))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b2)), emgr.Int(20))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b2)), emgr.Int(7))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b17)), emgr.Int(19))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b17)), emgr.Int(10))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b22)), emgr.Int(17))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b22)), emgr.Int(14))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b11)), emgr.Int(5))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b11)), emgr.Int(8))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b23)), emgr.Int(10))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b23)), emgr.Int(12))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b24)), emgr.Int(19))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b24)), emgr.Int(20))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b9)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b9)), emgr.Int(8))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b20)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b20)), emgr.Int(7))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b14)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b14)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b7)), emgr.Int(10))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b7)), emgr.Int(3))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b12)), emgr.Int(11))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b12)), emgr.Int(15))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b13)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b13)), emgr.Int(3))
		problem.set_initial_value(emgr.FluentExp(fluent_max_x), emgr.Int(20))
		problem.set_initial_value(emgr.FluentExp(fluent_min_x), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_max_y), emgr.Int(20))
		problem.set_initial_value(emgr.FluentExp(fluent_min_y), emgr.Int(1))
		problem.add_goal(goal=emgr.And(emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b10))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b10))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b11)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b11))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b12)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b12))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b13)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b13))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b17))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b17))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b18))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b18))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b21))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b21))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b7)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b7)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b7)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b7)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b8)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b8)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b11)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b11))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b12)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b12))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b13)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b13))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b17))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b17))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b18))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b18))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b21))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b21))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b2))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b12)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b12))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b13)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b13))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b16))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b16))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b13)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b13))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b25))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b25))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b15))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b15))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b19))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b19))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b20))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b20))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b19))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b19))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b20))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b20))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b2))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b18))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b18))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b21))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b21))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b21))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b21))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b20))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b20))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b9)))))))
			

		return problem

	def get_description(self):
		return 'block grouping'

	def version(self):
		return 1


class block_grouping_20_25_6_3(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):

		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_block = tm.UserType("block")
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("b", type_block)]))
		fluent_max_x = up.model.Fluent("max_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_x = up.model.Fluent("min_x", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_y = up.model.Fluent("max_y", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_min_y = up.model.Fluent("min_y", tm.RealType(None, None), _signature=OrderedDict([]))
		object_b1 = up.model.Object("b1", type_block)
		object_b2 = up.model.Object("b2", type_block)
		object_b3 = up.model.Object("b3", type_block)
		object_b4 = up.model.Object("b4", type_block)
		object_b5 = up.model.Object("b5", type_block)
		object_b6 = up.model.Object("b6", type_block)
		object_b7 = up.model.Object("b7", type_block)
		object_b8 = up.model.Object("b8", type_block)
		object_b9 = up.model.Object("b9", type_block)
		object_b10 = up.model.Object("b10", type_block)
		object_b11 = up.model.Object("b11", type_block)
		object_b12 = up.model.Object("b12", type_block)
		object_b13 = up.model.Object("b13", type_block)
		object_b14 = up.model.Object("b14", type_block)
		object_b15 = up.model.Object("b15", type_block)
		object_b16 = up.model.Object("b16", type_block)
		object_b17 = up.model.Object("b17", type_block)
		object_b18 = up.model.Object("b18", type_block)
		object_b19 = up.model.Object("b19", type_block)
		object_b20 = up.model.Object("b20", type_block)
		object_b21 = up.model.Object("b21", type_block)
		object_b22 = up.model.Object("b22", type_block)
		object_b23 = up.model.Object("b23", type_block)
		object_b24 = up.model.Object("b24", type_block)
		object_b25 = up.model.Object("b25", type_block)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_20_25_6_3", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_b1)
		problem.add_object(object_b2)
		problem.add_object(object_b3)
		problem.add_object(object_b4)
		problem.add_object(object_b5)
		problem.add_object(object_b6)
		problem.add_object(object_b7)
		problem.add_object(object_b8)
		problem.add_object(object_b9)
		problem.add_object(object_b10)
		problem.add_object(object_b11)
		problem.add_object(object_b12)
		problem.add_object(object_b13)
		problem.add_object(object_b14)
		problem.add_object(object_b15)
		problem.add_object(object_b16)
		problem.add_object(object_b17)
		problem.add_object(object_b18)
		problem.add_object(object_b19)
		problem.add_object(object_b20)
		problem.add_object(object_b21)
		problem.add_object(object_b22)
		problem.add_object(object_b23)
		problem.add_object(object_b24)
		problem.add_object(object_b25)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_max_x)
		problem.add_fluent(fluent_min_x)
		problem.add_fluent(fluent_max_y)
		problem.add_fluent(fluent_min_y)
		act_move_block_up = up.model.InstantaneousAction("move_block_up", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_y)))
		act_move_block_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_up)
		act_move_block_down = up.model.InstantaneousAction("move_block_down", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_y), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_down)
		act_move_block_right = up.model.InstantaneousAction("move_block_right", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1)), emgr.FluentExp(fluent_max_x)))
		act_move_block_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_right)
		act_move_block_left = up.model.InstantaneousAction("move_block_left", _parameters=OrderedDict([("b", type_block)]))
		act_move_block_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_min_x), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), emgr.Int(1))))
		act_move_block_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("b", type_block))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_block_left)
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b5)), emgr.Int(15))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b5)), emgr.Int(9))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b4)), emgr.Int(11))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b4)), emgr.Int(6))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b8)), emgr.Int(15))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b8)), emgr.Int(10))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b16)), emgr.Int(8))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b16)), emgr.Int(16))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b15)), emgr.Int(12))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b15)), emgr.Int(7))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b10)), emgr.Int(7))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b10)), emgr.Int(17))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b1)), emgr.Int(20))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b1)), emgr.Int(20))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b21)), emgr.Int(10))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b21)), emgr.Int(5))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b18)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b18)), emgr.Int(16))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b3)), emgr.Int(19))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b3)), emgr.Int(10))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b6)), emgr.Int(17))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b6)), emgr.Int(9))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b19)), emgr.Int(14))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b19)), emgr.Int(5))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b25)), emgr.Int(17))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b25)), emgr.Int(6))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b2)), emgr.Int(19))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b2)), emgr.Int(20))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b17)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b17)), emgr.Int(14))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b22)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b22)), emgr.Int(7))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b11)), emgr.Int(8))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b11)), emgr.Int(13))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b23)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b23)), emgr.Int(3))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b24)), emgr.Int(5))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b24)), emgr.Int(9))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b9)), emgr.Int(11))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b9)), emgr.Int(7))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b20)), emgr.Int(12))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b20)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b14)), emgr.Int(12))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b14)), emgr.Int(12))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b7)), emgr.Int(14))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b7)), emgr.Int(9))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b12)), emgr.Int(12))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b12)), emgr.Int(12))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_b13)), emgr.Int(18))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_b13)), emgr.Int(8))
		problem.set_initial_value(emgr.FluentExp(fluent_max_x), emgr.Int(20))
		problem.set_initial_value(emgr.FluentExp(fluent_min_x), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_max_y), emgr.Int(20))
		problem.set_initial_value(emgr.FluentExp(fluent_min_y), emgr.Int(1))
		problem.add_goal(goal=emgr.And(emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b10)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b10))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b11)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b11))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b12)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b12))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b13)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b13))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b18))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b18))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b1)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b1)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b22))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b2)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b2)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b3)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b3)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b4)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b4)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b5)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b5)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b6)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b6)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b7)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b7)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b7)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b7)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b8)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b8)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b11)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b11))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b12)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b12))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b13))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b13))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b20))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b20))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b21))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b21))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b10)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b10)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b12)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b12))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b13)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b13))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b15))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b15))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b11)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b11)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b13)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b13))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b14))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b14))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b12)), fluent_x(emgr.ObjectExp(object_b25))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b12)), fluent_y(emgr.ObjectExp(object_b25))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b14)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b14))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b20))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b20))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b21))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b21))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b13)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b13)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b15)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b15))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b14)), fluent_x(emgr.ObjectExp(object_b25))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b14)), fluent_y(emgr.ObjectExp(object_b25))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b16)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b16))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b15)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b15)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b17)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b17))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b19))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b19))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b22))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b16)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b16)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b18)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b18))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b23))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b23))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b17)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b17)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b2)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b2))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b6))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b6))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b19)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b19))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b18)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b18)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b2))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b20)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b20))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b21)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b21))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b22))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b22))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b19)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b19)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b21))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b21))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b20)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b20)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b4))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b4))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b9))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b9))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b22)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b22))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b21)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b21)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b23)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b23))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b24))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b24))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b22)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b22)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b7))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b7))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b24)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b24))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b23)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b23)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b3))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b3))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b5))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b5))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b8))), emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b8))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b9))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b24)), fluent_x(emgr.ObjectExp(object_b25)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b24)), fluent_y(emgr.ObjectExp(object_b25))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b3)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b3))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b4)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b4))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b5)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b5))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b6)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b6))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b7)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b7))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b8)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b8))))), emgr.Or(emgr.Not(emgr.Equals(fluent_x(emgr.ObjectExp(object_b25)), fluent_x(emgr.ObjectExp(object_b9)))), emgr.Not(emgr.Equals(fluent_y(emgr.ObjectExp(object_b25)), fluent_y(emgr.ObjectExp(object_b9)))))))
	

		return problem

	def get_description(self):
		return 'block grouping'

	def version(self):
		return 1
