from fractions import Fraction
from collections import OrderedDict
import unified_planning as up
from unified_planning.shortcuts import *
from unified_planning.io.pddl_writer import PDDLWriter
from unified_planning.io.pddl_reader import PDDLReader

from planning_tests.commons.problem import TestCaseProblem


class plant_watering_4_1(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):
		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_thing = tm.UserType("thing")
		type_plant = tm.UserType("plant", type_thing)
		type_tap = tm.UserType("tap", type_thing)
		type_agent = tm.UserType("agent", type_thing)
		fluent_maxx = up.model.Fluent("maxx", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_maxy = up.model.Fluent("maxy", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_miny = up.model.Fluent("miny", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_minx = up.model.Fluent("minx", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("t", type_thing)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("t", type_thing)]))
		fluent_carrying = up.model.Fluent("carrying", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_poured = up.model.Fluent("poured", tm.RealType(None, None), _signature=OrderedDict([("p", type_plant)]))
		fluent_total_poured = up.model.Fluent("total_poured", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_total_loaded = up.model.Fluent("total_loaded", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_int = up.model.Fluent("max_int", tm.RealType(None, None), _signature=OrderedDict([]))
		object_tap1 = up.model.Object("tap1", type_tap)
		object_agent1 = up.model.Object("agent1", type_agent)
		object_plant3 = up.model.Object("plant3", type_plant)
		object_plant1 = up.model.Object("plant1", type_plant)
		object_plant4 = up.model.Object("plant4", type_plant)
		object_plant2 = up.model.Object("plant2", type_plant)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_4_1", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_tap1)
		problem.add_object(object_agent1)
		problem.add_object(object_plant3)
		problem.add_object(object_plant1)
		problem.add_object(object_plant4)
		problem.add_object(object_plant2)
		problem.add_fluent(fluent_maxx)
		problem.add_fluent(fluent_maxy)
		problem.add_fluent(fluent_miny)
		problem.add_fluent(fluent_minx)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_carrying)
		problem.add_fluent(fluent_poured)
		problem.add_fluent(fluent_total_poured)
		problem.add_fluent(fluent_total_loaded)
		problem.add_fluent(fluent_max_int)
		act_move_up = up.model.InstantaneousAction("move_up", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy)))
		act_move_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up)
		act_move_down = up.model.InstantaneousAction("move_down", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))))
		act_move_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down)
		act_move_right = up.model.InstantaneousAction("move_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)))
		act_move_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_right)
		act_move_left = up.model.InstantaneousAction("move_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))))
		act_move_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_left)
		act_move_up_left = up.model.InstantaneousAction("move_up_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up_left.add_precondition(emgr.And(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))), emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy))))
		act_move_up_left.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_up_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up_left)
		act_move_up_right = up.model.InstantaneousAction("move_up_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up_right.add_precondition(emgr.And(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)), emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy))))
		act_move_up_right.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_up_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up_right)
		act_move_down_left = up.model.InstantaneousAction("move_down_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down_left.add_precondition(emgr.And(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))), emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)))))
		act_move_down_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_down_left.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down_left)
		act_move_down_right = up.model.InstantaneousAction("move_down_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down_right.add_precondition(emgr.And(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)), emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)))))
		act_move_down_right.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_down_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down_right)
		act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("a", type_agent), ("t", type_tap)]))
		act_load.add_precondition(emgr.And(emgr.Equals(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_x(emgr.ParameterExp(up.model.Parameter("t", type_tap)))), emgr.Equals(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_y(emgr.ParameterExp(up.model.Parameter("t", type_tap)))), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_total_loaded), emgr.Int(1)), emgr.FluentExp(fluent_max_int)), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_carrying), emgr.Int(1)), emgr.FluentExp(fluent_max_int))))
		act_load.add_increase_effect(fluent=emgr.FluentExp(fluent_carrying), value=emgr.Int(1), condition=emgr.TRUE())
		act_load.add_increase_effect(fluent=emgr.FluentExp(fluent_total_loaded), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_load)
		act_pour = up.model.InstantaneousAction("pour", _parameters=OrderedDict([("a", type_agent), ("p", type_plant)]))
		act_pour.add_precondition(emgr.And(emgr.Equals(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_x(emgr.ParameterExp(up.model.Parameter("p", type_plant)))), emgr.Equals(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_y(emgr.ParameterExp(up.model.Parameter("p", type_plant)))), emgr.LE(emgr.Int(1), emgr.FluentExp(fluent_carrying)), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_total_poured), emgr.Int(1)), emgr.FluentExp(fluent_max_int)), emgr.LE(emgr.Plus(fluent_poured(emgr.ParameterExp(up.model.Parameter("p", type_plant))), emgr.Int(1)), emgr.FluentExp(fluent_max_int))))
		act_pour.add_decrease_effect(fluent=emgr.FluentExp(fluent_carrying), value=emgr.Int(1), condition=emgr.TRUE())
		act_pour.add_increase_effect(fluent=fluent_poured(emgr.ParameterExp(up.model.Parameter("p", type_plant))), value=emgr.Int(1), condition=emgr.TRUE())
		act_pour.add_increase_effect(fluent=emgr.FluentExp(fluent_total_poured), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_pour)
		problem.set_initial_value(emgr.FluentExp(fluent_max_int), emgr.Int(80))
		problem.set_initial_value(emgr.FluentExp(fluent_maxx), emgr.Int(4))
		problem.set_initial_value(emgr.FluentExp(fluent_minx), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_maxy), emgr.Int(4))
		problem.set_initial_value(emgr.FluentExp(fluent_miny), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_carrying), emgr.Int(0))
		problem.set_initial_value(emgr.FluentExp(fluent_total_poured), emgr.Int(0))
		problem.set_initial_value(emgr.FluentExp(fluent_total_loaded), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant1)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant2)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant3)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant4)), emgr.Int(0))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_agent1)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_agent1)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant2)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant2)), emgr.Int(2))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant3)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant3)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_tap1)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_tap1)), emgr.Int(3))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant4)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant4)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant1)), emgr.Int(2))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant1)), emgr.Int(2))
		problem.add_goal(goal=emgr.And(emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant1)), emgr.Int(4)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant2)), emgr.Int(2)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant3)), emgr.Int(7)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant4)), emgr.Int(9)), emgr.Equals(emgr.FluentExp(fluent_total_poured), emgr.Plus(emgr.Plus(emgr.Plus(fluent_poured(emgr.ObjectExp(object_plant1)), fluent_poured(emgr.ObjectExp(object_plant2))), fluent_poured(emgr.ObjectExp(object_plant3))), fluent_poured(emgr.ObjectExp(object_plant4))))))
	

		return problem

	def get_description(self):
		return 'time to water those plants'

	def version(self):
		return 1

class plant_watering_4_2(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):

		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_thing = tm.UserType("thing")
		type_plant = tm.UserType("plant", type_thing)
		type_tap = tm.UserType("tap", type_thing)
		type_agent = tm.UserType("agent", type_thing)
		fluent_maxx = up.model.Fluent("maxx", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_maxy = up.model.Fluent("maxy", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_miny = up.model.Fluent("miny", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_minx = up.model.Fluent("minx", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("t", type_thing)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("t", type_thing)]))
		fluent_carrying = up.model.Fluent("carrying", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_poured = up.model.Fluent("poured", tm.RealType(None, None), _signature=OrderedDict([("p", type_plant)]))
		fluent_total_poured = up.model.Fluent("total_poured", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_total_loaded = up.model.Fluent("total_loaded", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_int = up.model.Fluent("max_int", tm.RealType(None, None), _signature=OrderedDict([]))
		object_tap1 = up.model.Object("tap1", type_tap)
		object_agent1 = up.model.Object("agent1", type_agent)
		object_plant3 = up.model.Object("plant3", type_plant)
		object_plant1 = up.model.Object("plant1", type_plant)
		object_plant4 = up.model.Object("plant4", type_plant)
		object_plant2 = up.model.Object("plant2", type_plant)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_4_2", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_tap1)
		problem.add_object(object_agent1)
		problem.add_object(object_plant3)
		problem.add_object(object_plant1)
		problem.add_object(object_plant4)
		problem.add_object(object_plant2)
		problem.add_fluent(fluent_maxx)
		problem.add_fluent(fluent_maxy)
		problem.add_fluent(fluent_miny)
		problem.add_fluent(fluent_minx)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_carrying)
		problem.add_fluent(fluent_poured)
		problem.add_fluent(fluent_total_poured)
		problem.add_fluent(fluent_total_loaded)
		problem.add_fluent(fluent_max_int)
		act_move_up = up.model.InstantaneousAction("move_up", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy)))
		act_move_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up)
		act_move_down = up.model.InstantaneousAction("move_down", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))))
		act_move_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down)
		act_move_right = up.model.InstantaneousAction("move_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)))
		act_move_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_right)
		act_move_left = up.model.InstantaneousAction("move_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))))
		act_move_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_left)
		act_move_up_left = up.model.InstantaneousAction("move_up_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up_left.add_precondition(emgr.And(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))), emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy))))
		act_move_up_left.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_up_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up_left)
		act_move_up_right = up.model.InstantaneousAction("move_up_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up_right.add_precondition(emgr.And(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)), emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy))))
		act_move_up_right.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_up_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up_right)
		act_move_down_left = up.model.InstantaneousAction("move_down_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down_left.add_precondition(emgr.And(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))), emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)))))
		act_move_down_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_down_left.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down_left)
		act_move_down_right = up.model.InstantaneousAction("move_down_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down_right.add_precondition(emgr.And(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)), emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)))))
		act_move_down_right.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_down_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down_right)
		act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("a", type_agent), ("t", type_tap)]))
		act_load.add_precondition(emgr.And(emgr.Equals(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_x(emgr.ParameterExp(up.model.Parameter("t", type_tap)))), emgr.Equals(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_y(emgr.ParameterExp(up.model.Parameter("t", type_tap)))), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_total_loaded), emgr.Int(1)), emgr.FluentExp(fluent_max_int)), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_carrying), emgr.Int(1)), emgr.FluentExp(fluent_max_int))))
		act_load.add_increase_effect(fluent=emgr.FluentExp(fluent_carrying), value=emgr.Int(1), condition=emgr.TRUE())
		act_load.add_increase_effect(fluent=emgr.FluentExp(fluent_total_loaded), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_load)
		act_pour = up.model.InstantaneousAction("pour", _parameters=OrderedDict([("a", type_agent), ("p", type_plant)]))
		act_pour.add_precondition(emgr.And(emgr.Equals(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_x(emgr.ParameterExp(up.model.Parameter("p", type_plant)))), emgr.Equals(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_y(emgr.ParameterExp(up.model.Parameter("p", type_plant)))), emgr.LE(emgr.Int(1), emgr.FluentExp(fluent_carrying)), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_total_poured), emgr.Int(1)), emgr.FluentExp(fluent_max_int)), emgr.LE(emgr.Plus(fluent_poured(emgr.ParameterExp(up.model.Parameter("p", type_plant))), emgr.Int(1)), emgr.FluentExp(fluent_max_int))))
		act_pour.add_decrease_effect(fluent=emgr.FluentExp(fluent_carrying), value=emgr.Int(1), condition=emgr.TRUE())
		act_pour.add_increase_effect(fluent=fluent_poured(emgr.ParameterExp(up.model.Parameter("p", type_plant))), value=emgr.Int(1), condition=emgr.TRUE())
		act_pour.add_increase_effect(fluent=emgr.FluentExp(fluent_total_poured), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_pour)
		problem.set_initial_value(emgr.FluentExp(fluent_max_int), emgr.Int(80))
		problem.set_initial_value(emgr.FluentExp(fluent_maxx), emgr.Int(4))
		problem.set_initial_value(emgr.FluentExp(fluent_minx), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_maxy), emgr.Int(4))
		problem.set_initial_value(emgr.FluentExp(fluent_miny), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_carrying), emgr.Int(0))
		problem.set_initial_value(emgr.FluentExp(fluent_total_poured), emgr.Int(0))
		problem.set_initial_value(emgr.FluentExp(fluent_total_loaded), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant1)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant2)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant3)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant4)), emgr.Int(0))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_agent1)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_agent1)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant2)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant2)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant3)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant3)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_tap1)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_tap1)), emgr.Int(3))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant4)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant4)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant1)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant1)), emgr.Int(3))
		problem.add_goal(goal=emgr.And(emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant1)), emgr.Int(10)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant2)), emgr.Int(3)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant3)), emgr.Int(4)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant4)), emgr.Int(6)), emgr.Equals(emgr.FluentExp(fluent_total_poured), emgr.Plus(emgr.Plus(emgr.Plus(fluent_poured(emgr.ObjectExp(object_plant1)), fluent_poured(emgr.ObjectExp(object_plant2))), fluent_poured(emgr.ObjectExp(object_plant3))), fluent_poured(emgr.ObjectExp(object_plant4))))))

		return problem

	def get_description(self):
		return 'time to water those plants'

	def version(self):
		return 1

class plant_watering_4_3(TestCaseProblem):

	def __init__(self, expected_version):
		TestCaseProblem.__init__(self, expected_version)

	def get_problem(self):
		env = up.environment.get_environment()
		emgr = env.expression_manager
		tm = env.type_manager
		type_thing = tm.UserType("thing")
		type_plant = tm.UserType("plant", type_thing)
		type_tap = tm.UserType("tap", type_thing)
		type_agent = tm.UserType("agent", type_thing)
		fluent_maxx = up.model.Fluent("maxx", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_maxy = up.model.Fluent("maxy", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_miny = up.model.Fluent("miny", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_minx = up.model.Fluent("minx", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_x = up.model.Fluent("x", tm.RealType(None, None), _signature=OrderedDict([("t", type_thing)]))
		fluent_y = up.model.Fluent("y", tm.RealType(None, None), _signature=OrderedDict([("t", type_thing)]))
		fluent_carrying = up.model.Fluent("carrying", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_poured = up.model.Fluent("poured", tm.RealType(None, None), _signature=OrderedDict([("p", type_plant)]))
		fluent_total_poured = up.model.Fluent("total_poured", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_total_loaded = up.model.Fluent("total_loaded", tm.RealType(None, None), _signature=OrderedDict([]))
		fluent_max_int = up.model.Fluent("max_int", tm.RealType(None, None), _signature=OrderedDict([]))
		object_tap1 = up.model.Object("tap1", type_tap)
		object_agent1 = up.model.Object("agent1", type_agent)
		object_plant3 = up.model.Object("plant3", type_plant)
		object_plant1 = up.model.Object("plant1", type_plant)
		object_plant4 = up.model.Object("plant4", type_plant)
		object_plant2 = up.model.Object("plant2", type_plant)
		problem_initial_defaults = {}
		problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
		problem = up.model.Problem("instance_4_3", env, initial_defaults=problem_initial_defaults)
		problem.add_object(object_tap1)
		problem.add_object(object_agent1)
		problem.add_object(object_plant3)
		problem.add_object(object_plant1)
		problem.add_object(object_plant4)
		problem.add_object(object_plant2)
		problem.add_fluent(fluent_maxx)
		problem.add_fluent(fluent_maxy)
		problem.add_fluent(fluent_miny)
		problem.add_fluent(fluent_minx)
		problem.add_fluent(fluent_x)
		problem.add_fluent(fluent_y)
		problem.add_fluent(fluent_carrying)
		problem.add_fluent(fluent_poured)
		problem.add_fluent(fluent_total_poured)
		problem.add_fluent(fluent_total_loaded)
		problem.add_fluent(fluent_max_int)
		act_move_up = up.model.InstantaneousAction("move_up", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up.add_precondition(emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy)))
		act_move_up.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up)
		act_move_down = up.model.InstantaneousAction("move_down", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down.add_precondition(emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))))
		act_move_down.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down)
		act_move_right = up.model.InstantaneousAction("move_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_right.add_precondition(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)))
		act_move_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_right)
		act_move_left = up.model.InstantaneousAction("move_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_left.add_precondition(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))))
		act_move_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_left)
		act_move_up_left = up.model.InstantaneousAction("move_up_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up_left.add_precondition(emgr.And(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))), emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy))))
		act_move_up_left.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_up_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up_left)
		act_move_up_right = up.model.InstantaneousAction("move_up_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_up_right.add_precondition(emgr.And(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)), emgr.LE(emgr.Plus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxy))))
		act_move_up_right.add_increase_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_up_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_up_right)
		act_move_down_left = up.model.InstantaneousAction("move_down_left", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down_left.add_precondition(emgr.And(emgr.LE(emgr.FluentExp(fluent_minx), emgr.Minus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1))), emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)))))
		act_move_down_left.add_decrease_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_down_left.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down_left)
		act_move_down_right = up.model.InstantaneousAction("move_down_right", _parameters=OrderedDict([("a", type_agent)]))
		act_move_down_right.add_precondition(emgr.And(emgr.LE(emgr.Plus(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)), emgr.FluentExp(fluent_maxx)), emgr.LE(emgr.FluentExp(fluent_miny), emgr.Minus(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), emgr.Int(1)))))
		act_move_down_right.add_decrease_effect(fluent=fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		act_move_down_right.add_increase_effect(fluent=fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_move_down_right)
		act_load = up.model.InstantaneousAction("load", _parameters=OrderedDict([("a", type_agent), ("t", type_tap)]))
		act_load.add_precondition(emgr.And(emgr.Equals(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_x(emgr.ParameterExp(up.model.Parameter("t", type_tap)))), emgr.Equals(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_y(emgr.ParameterExp(up.model.Parameter("t", type_tap)))), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_total_loaded), emgr.Int(1)), emgr.FluentExp(fluent_max_int)), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_carrying), emgr.Int(1)), emgr.FluentExp(fluent_max_int))))
		act_load.add_increase_effect(fluent=emgr.FluentExp(fluent_carrying), value=emgr.Int(1), condition=emgr.TRUE())
		act_load.add_increase_effect(fluent=emgr.FluentExp(fluent_total_loaded), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_load)
		act_pour = up.model.InstantaneousAction("pour", _parameters=OrderedDict([("a", type_agent), ("p", type_plant)]))
		act_pour.add_precondition(emgr.And(emgr.Equals(fluent_x(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_x(emgr.ParameterExp(up.model.Parameter("p", type_plant)))), emgr.Equals(fluent_y(emgr.ParameterExp(up.model.Parameter("a", type_agent))), fluent_y(emgr.ParameterExp(up.model.Parameter("p", type_plant)))), emgr.LE(emgr.Int(1), emgr.FluentExp(fluent_carrying)), emgr.LE(emgr.Plus(emgr.FluentExp(fluent_total_poured), emgr.Int(1)), emgr.FluentExp(fluent_max_int)), emgr.LE(emgr.Plus(fluent_poured(emgr.ParameterExp(up.model.Parameter("p", type_plant))), emgr.Int(1)), emgr.FluentExp(fluent_max_int))))
		act_pour.add_decrease_effect(fluent=emgr.FluentExp(fluent_carrying), value=emgr.Int(1), condition=emgr.TRUE())
		act_pour.add_increase_effect(fluent=fluent_poured(emgr.ParameterExp(up.model.Parameter("p", type_plant))), value=emgr.Int(1), condition=emgr.TRUE())
		act_pour.add_increase_effect(fluent=emgr.FluentExp(fluent_total_poured), value=emgr.Int(1), condition=emgr.TRUE())
		problem.add_action(act_pour)
		problem.set_initial_value(emgr.FluentExp(fluent_max_int), emgr.Int(80))
		problem.set_initial_value(emgr.FluentExp(fluent_maxx), emgr.Int(4))
		problem.set_initial_value(emgr.FluentExp(fluent_minx), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_maxy), emgr.Int(4))
		problem.set_initial_value(emgr.FluentExp(fluent_miny), emgr.Int(1))
		problem.set_initial_value(emgr.FluentExp(fluent_carrying), emgr.Int(0))
		problem.set_initial_value(emgr.FluentExp(fluent_total_poured), emgr.Int(0))
		problem.set_initial_value(emgr.FluentExp(fluent_total_loaded), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant1)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant2)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant3)), emgr.Int(0))
		problem.set_initial_value(fluent_poured(emgr.ObjectExp(object_plant4)), emgr.Int(0))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_agent1)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_agent1)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant2)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant2)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant3)), emgr.Int(4))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant3)), emgr.Int(4))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_tap1)), emgr.Int(1))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_tap1)), emgr.Int(1))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant4)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant4)), emgr.Int(3))
		problem.set_initial_value(fluent_x(emgr.ObjectExp(object_plant1)), emgr.Int(3))
		problem.set_initial_value(fluent_y(emgr.ObjectExp(object_plant1)), emgr.Int(3))
		problem.add_goal(goal=emgr.And(emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant1)), emgr.Int(10)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant2)), emgr.Int(5)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant3)), emgr.Int(7)), emgr.Equals(fluent_poured(emgr.ObjectExp(object_plant4)), emgr.Int(4)), emgr.Equals(emgr.FluentExp(fluent_total_poured), emgr.Plus(emgr.Plus(emgr.Plus(fluent_poured(emgr.ObjectExp(object_plant1)), fluent_poured(emgr.ObjectExp(object_plant2))), fluent_poured(emgr.ObjectExp(object_plant3))), fluent_poured(emgr.ObjectExp(object_plant4))))))
		
		return problem

	def get_description(self):
		return 'time to water those plants'

	def version(self):
		return 1