from fractions import Fraction
from collections import OrderedDict
import unified_planning as up
from unified_planning.shortcuts import *
from planning_tests.commons.problem import TestCaseProblem


class satellite_pfile1(TestCaseProblem):

    def __init__(self, expected_version):
        TestCaseProblem.__init__(self, expected_version)

    def get_problem(self):

        env = up.environment.get_env()
        emgr = env.expression_manager
        tm = env.type_manager
        type_instrument = tm.UserType("instrument")
        type_satellite = tm.UserType("satellite")
        type_mode = tm.UserType("mode")
        type_direction = tm.UserType("direction")
        fluent_on_board = up.model.Fluent("on_board", tm.BoolType(), _signature=OrderedDict([("i", type_instrument), ("s", type_satellite)]))
        fluent_supports = up.model.Fluent("supports", tm.BoolType(), _signature=OrderedDict([("i", type_instrument), ("m", type_mode)]))
        fluent_pointing = up.model.Fluent("pointing", tm.BoolType(), _signature=OrderedDict([("s", type_satellite), ("d", type_direction)]))
        fluent_power_avail = up.model.Fluent("power_avail", tm.BoolType(), _signature=OrderedDict([("s", type_satellite)]))
        fluent_power_on = up.model.Fluent("power_on", tm.BoolType(), _signature=OrderedDict([("i", type_instrument)]))
        fluent_calibrated = up.model.Fluent("calibrated", tm.BoolType(), _signature=OrderedDict([("i", type_instrument)]))
        fluent_have_image = up.model.Fluent("have_image", tm.BoolType(), _signature=OrderedDict([("d", type_direction), ("m", type_mode)]))
        fluent_calibration_target = up.model.Fluent("calibration_target", tm.BoolType(), _signature=OrderedDict([("i", type_instrument), ("d", type_direction)]))
        fluent_data_capacity = up.model.Fluent("data_capacity", tm.RealType(None, None), _signature=OrderedDict([("s", type_satellite)]))
        fluent_data = up.model.Fluent("data", tm.RealType(None, None), _signature=OrderedDict([("d", type_direction), ("m", type_mode)]))
        fluent_slew_time = up.model.Fluent("slew_time", tm.RealType(None, None), _signature=OrderedDict([("a", type_direction), ("b", type_direction)]))
        fluent_data_stored = up.model.Fluent("data-stored", tm.RealType(None, None), _signature=OrderedDict([]))
        fluent_fuel = up.model.Fluent("fuel", tm.RealType(None, None), _signature=OrderedDict([("s", type_satellite)]))
        fluent_fuel_used = up.model.Fluent("fuel-used", tm.RealType(None, None), _signature=OrderedDict([]))
        object_satellite0 = up.model.Object("satellite0", type_satellite)
        object_instrument0 = up.model.Object("instrument0", type_instrument)
        object_image1 = up.model.Object("image1", type_mode)
        object_spectrograph2 = up.model.Object("spectrograph2", type_mode)
        object_thermograph0 = up.model.Object("thermograph0", type_mode)
        object_Star0 = up.model.Object("Star0", type_direction)
        object_GroundStation1 = up.model.Object("GroundStation1", type_direction)
        object_GroundStation2 = up.model.Object("GroundStation2", type_direction)
        object_Phenomenon3 = up.model.Object("Phenomenon3", type_direction)
        object_Phenomenon4 = up.model.Object("Phenomenon4", type_direction)
        object_Star5 = up.model.Object("Star5", type_direction)
        object_Phenomenon6 = up.model.Object("Phenomenon6", type_direction)
        problem_initial_defaults = {}
        problem_initial_defaults[tm.BoolType()] = emgr.FALSE()
        problem = up.model.Problem("strips-sat-x-1", env, initial_defaults=problem_initial_defaults)
        problem.add_object(object_satellite0)
        problem.add_object(object_instrument0)
        problem.add_object(object_image1)
        problem.add_object(object_spectrograph2)
        problem.add_object(object_thermograph0)
        problem.add_object(object_Star0)
        problem.add_object(object_GroundStation1)
        problem.add_object(object_GroundStation2)
        problem.add_object(object_Phenomenon3)
        problem.add_object(object_Phenomenon4)
        problem.add_object(object_Star5)
        problem.add_object(object_Phenomenon6)
        problem.add_fluent(fluent_on_board, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_supports, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_pointing, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_power_avail, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_power_on, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibrated, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_have_image, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_calibration_target, default_initial_value=emgr.FALSE())
        problem.add_fluent(fluent_data_capacity)
        problem.add_fluent(fluent_data)
        problem.add_fluent(fluent_slew_time)
        problem.add_fluent(fluent_data_stored)
        problem.add_fluent(fluent_fuel)
        problem.add_fluent(fluent_fuel_used)
        act_turn_to = up.model.InstantaneousAction("turn_to", _parameters=OrderedDict([("s", type_satellite), ("d_new", type_direction), ("d_prev", type_direction)]))
        act_turn_to.add_precondition(emgr.And(fluent_pointing(emgr.ParameterExp(up.model.Parameter("s", type_satellite)), emgr.ParameterExp(up.model.Parameter("d_prev", type_direction))), emgr.Not(emgr.Equals(emgr.ParameterExp(up.model.Parameter("d_new", type_direction)), emgr.ParameterExp(up.model.Parameter("d_prev", type_direction)))), emgr.LE(fluent_slew_time(emgr.ParameterExp(up.model.Parameter("d_new", type_direction)), emgr.ParameterExp(up.model.Parameter("d_prev", type_direction))), fluent_fuel(emgr.ParameterExp(up.model.Parameter("s", type_satellite))))))
        act_turn_to.add_effect(fluent=fluent_pointing(emgr.ParameterExp(up.model.Parameter("s", type_satellite)), emgr.ParameterExp(up.model.Parameter("d_new", type_direction))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_turn_to.add_effect(fluent=fluent_pointing(emgr.ParameterExp(up.model.Parameter("s", type_satellite)), emgr.ParameterExp(up.model.Parameter("d_prev", type_direction))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_turn_to.add_decrease_effect(fluent=fluent_fuel(emgr.ParameterExp(up.model.Parameter("s", type_satellite))), value=fluent_slew_time(emgr.ParameterExp(up.model.Parameter("d_new", type_direction)), emgr.ParameterExp(up.model.Parameter("d_prev", type_direction))), condition=emgr.TRUE())
        act_turn_to.add_increase_effect(fluent=emgr.FluentExp(fluent_fuel_used), value=fluent_slew_time(emgr.ParameterExp(up.model.Parameter("d_new", type_direction)), emgr.ParameterExp(up.model.Parameter("d_prev", type_direction))), condition=emgr.TRUE())
        problem.add_action(act_turn_to)
        act_switch_on = up.model.InstantaneousAction("switch_on", _parameters=OrderedDict([("i", type_instrument), ("s", type_satellite)]))
        act_switch_on.add_precondition(emgr.And(fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_instrument)), emgr.ParameterExp(up.model.Parameter("s", type_satellite))), fluent_power_avail(emgr.ParameterExp(up.model.Parameter("s", type_satellite)))))
        act_switch_on.add_effect(fluent=fluent_power_on(emgr.ParameterExp(up.model.Parameter("i", type_instrument))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_switch_on.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_instrument))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_switch_on.add_effect(fluent=fluent_power_avail(emgr.ParameterExp(up.model.Parameter("s", type_satellite))), value=emgr.FALSE(), condition=emgr.TRUE())
        problem.add_action(act_switch_on)
        act_switch_off = up.model.InstantaneousAction("switch_off", _parameters=OrderedDict([("i", type_instrument), ("s", type_satellite)]))
        act_switch_off.add_precondition(emgr.And(fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_instrument)), emgr.ParameterExp(up.model.Parameter("s", type_satellite))), fluent_power_on(emgr.ParameterExp(up.model.Parameter("i", type_instrument)))))
        act_switch_off.add_effect(fluent=fluent_power_on(emgr.ParameterExp(up.model.Parameter("i", type_instrument))), value=emgr.FALSE(), condition=emgr.TRUE())
        act_switch_off.add_effect(fluent=fluent_power_avail(emgr.ParameterExp(up.model.Parameter("s", type_satellite))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_switch_off)
        act_calibrate = up.model.InstantaneousAction("calibrate", _parameters=OrderedDict([("s", type_satellite), ("i", type_instrument), ("d", type_direction)]))
        act_calibrate.add_precondition(emgr.And(fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_instrument)), emgr.ParameterExp(up.model.Parameter("s", type_satellite))), fluent_calibration_target(emgr.ParameterExp(up.model.Parameter("i", type_instrument)), emgr.ParameterExp(up.model.Parameter("d", type_direction))), fluent_pointing(emgr.ParameterExp(up.model.Parameter("s", type_satellite)), emgr.ParameterExp(up.model.Parameter("d", type_direction))), fluent_power_on(emgr.ParameterExp(up.model.Parameter("i", type_instrument)))))
        act_calibrate.add_effect(fluent=fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_instrument))), value=emgr.TRUE(), condition=emgr.TRUE())
        problem.add_action(act_calibrate)
        act_take_image = up.model.InstantaneousAction("take_image", _parameters=OrderedDict([("s", type_satellite), ("d", type_direction), ("i", type_instrument), ("m", type_mode)]))
        act_take_image.add_precondition(emgr.And(fluent_calibrated(emgr.ParameterExp(up.model.Parameter("i", type_instrument))), fluent_on_board(emgr.ParameterExp(up.model.Parameter("i", type_instrument)), emgr.ParameterExp(up.model.Parameter("s", type_satellite))), fluent_supports(emgr.ParameterExp(up.model.Parameter("i", type_instrument)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_power_on(emgr.ParameterExp(up.model.Parameter("i", type_instrument))), fluent_pointing(emgr.ParameterExp(up.model.Parameter("s", type_satellite)), emgr.ParameterExp(up.model.Parameter("d", type_direction))), fluent_power_on(emgr.ParameterExp(up.model.Parameter("i", type_instrument))), emgr.LE(fluent_data(emgr.ParameterExp(up.model.Parameter("d", type_direction)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), fluent_data_capacity(emgr.ParameterExp(up.model.Parameter("s", type_satellite))))))
        act_take_image.add_decrease_effect(fluent=fluent_data_capacity(emgr.ParameterExp(up.model.Parameter("s", type_satellite))), value=fluent_data(emgr.ParameterExp(up.model.Parameter("d", type_direction)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), condition=emgr.TRUE())
        act_take_image.add_effect(fluent=fluent_have_image(emgr.ParameterExp(up.model.Parameter("d", type_direction)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), value=emgr.TRUE(), condition=emgr.TRUE())
        act_take_image.add_increase_effect(fluent=emgr.FluentExp(fluent_data_stored), value=fluent_data(emgr.ParameterExp(up.model.Parameter("d", type_direction)), emgr.ParameterExp(up.model.Parameter("m", type_mode))), condition=emgr.TRUE())
        problem.add_action(act_take_image)
        problem.set_initial_value(fluent_supports(emgr.ObjectExp(object_instrument0), emgr.ObjectExp(object_thermograph0)), emgr.TRUE())
        problem.set_initial_value(fluent_calibration_target(emgr.ObjectExp(object_instrument0), emgr.ObjectExp(object_GroundStation2)), emgr.TRUE())
        problem.set_initial_value(fluent_on_board(emgr.ObjectExp(object_instrument0), emgr.ObjectExp(object_satellite0)), emgr.TRUE())
        problem.set_initial_value(fluent_power_avail(emgr.ObjectExp(object_satellite0)), emgr.TRUE())
        problem.set_initial_value(fluent_pointing(emgr.ObjectExp(object_satellite0), emgr.ObjectExp(object_Phenomenon6)), emgr.TRUE())
        problem.set_initial_value(fluent_data_capacity(emgr.ObjectExp(object_satellite0)), emgr.Int(1000))
        problem.set_initial_value(fluent_fuel(emgr.ObjectExp(object_satellite0)), emgr.Int(112))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_image1)), emgr.Int(22))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_image1)), emgr.Int(120))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_image1)), emgr.Int(203))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_image1)), emgr.Int(144))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_spectrograph2)), emgr.Int(125))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_spectrograph2)), emgr.Int(196))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_spectrograph2)), emgr.Int(68))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_spectrograph2)), emgr.Int(174))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_thermograph0)), emgr.Int(136))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_thermograph0)), emgr.Int(134))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_thermograph0)), emgr.Int(273))
        problem.set_initial_value(fluent_data(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_thermograph0)), emgr.Int(219))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation1), emgr.ObjectExp(object_Star0)), emgr.Real(Fraction(1817, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star0), emgr.ObjectExp(object_GroundStation1)), emgr.Real(Fraction(1817, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation2), emgr.ObjectExp(object_Star0)), emgr.Real(Fraction(3861, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star0), emgr.ObjectExp(object_GroundStation2)), emgr.Real(Fraction(3861, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation2), emgr.ObjectExp(object_GroundStation1)), emgr.Real(Fraction(1701, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation1), emgr.ObjectExp(object_GroundStation2)), emgr.Real(Fraction(1701, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_Star0)), emgr.Real(Fraction(1429, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star0), emgr.ObjectExp(object_Phenomenon3)), emgr.Real(Fraction(1429, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_GroundStation1)), emgr.Real(Fraction(2237, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation1), emgr.ObjectExp(object_Phenomenon3)), emgr.Real(Fraction(2237, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_GroundStation2)), emgr.Real(Fraction(1697, 50)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation2), emgr.ObjectExp(object_Phenomenon3)), emgr.Real(Fraction(1697, 50)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_Star0)), emgr.Real(Fraction(3501, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star0), emgr.ObjectExp(object_Phenomenon4)), emgr.Real(Fraction(3501, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_GroundStation1)), emgr.Real(Fraction(3179, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation1), emgr.ObjectExp(object_Phenomenon4)), emgr.Real(Fraction(3179, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_GroundStation2)), emgr.Real(Fraction(3973, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation2), emgr.ObjectExp(object_Phenomenon4)), emgr.Real(Fraction(3973, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_Phenomenon3)), emgr.Real(Fraction(643, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_Phenomenon4)), emgr.Real(Fraction(643, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_Star0)), emgr.Real(Fraction(914, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star0), emgr.ObjectExp(object_Star5)), emgr.Real(Fraction(914, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_GroundStation1)), emgr.Real(Fraction(859, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation1), emgr.ObjectExp(object_Star5)), emgr.Real(Fraction(859, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_GroundStation2)), emgr.Real(Fraction(3143, 50)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation2), emgr.ObjectExp(object_Star5)), emgr.Real(Fraction(3143, 50)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_Phenomenon3)), emgr.Real(Fraction(509, 50)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_Star5)), emgr.Real(Fraction(509, 50)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_Phenomenon4)), emgr.Real(Fraction(129, 2)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_Star5)), emgr.Real(Fraction(129, 2)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_Star0)), emgr.Real(Fraction(7707, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star0), emgr.ObjectExp(object_Phenomenon6)), emgr.Real(Fraction(7707, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_GroundStation1)), emgr.Real(Fraction(1763, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation1), emgr.ObjectExp(object_Phenomenon6)), emgr.Real(Fraction(1763, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_GroundStation2)), emgr.Real(Fraction(5073, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_GroundStation2), emgr.ObjectExp(object_Phenomenon6)), emgr.Real(Fraction(5073, 100)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_Phenomenon3)), emgr.Real(Fraction(59, 4)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon3), emgr.ObjectExp(object_Phenomenon6)), emgr.Real(Fraction(59, 4)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_Phenomenon4)), emgr.Real(Fraction(1049, 500)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_Phenomenon6)), emgr.Real(Fraction(1049, 500)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_Star5)), emgr.Real(Fraction(733, 25)))
        problem.set_initial_value(fluent_slew_time(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_Phenomenon6)), emgr.Real(Fraction(733, 25)))
        problem.set_initial_value(emgr.FluentExp(fluent_data_stored), emgr.Int(0))
        problem.set_initial_value(emgr.FluentExp(fluent_fuel_used), emgr.Int(0))
        problem.add_goal(goal=emgr.And(fluent_have_image(emgr.ObjectExp(object_Phenomenon4), emgr.ObjectExp(object_thermograph0)), fluent_have_image(emgr.ObjectExp(object_Star5), emgr.ObjectExp(object_thermograph0)), fluent_have_image(emgr.ObjectExp(object_Phenomenon6), emgr.ObjectExp(object_thermograph0))))
        return problem

    def get_description(self):
        return 'satellite'

    def version(self):
        return 1